/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/database/master/sync": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the sync time of master */
        get: operations["getMasterSyncTime"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/database/readonly/sync": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the sync time of readonly */
        get: operations["getReadOnlySyncTime"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/associations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a new association */
        post: operations["createAssociation"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/associations/types": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get available association types */
        get: operations["getAvailableAssociationTypes"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/associations/types/{associationTypeId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get association type by id */
        get: operations["getAssociationType"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/associations/{associationId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get an association by id */
        get: operations["getAssociation"];
        /** Update association settings */
        put: operations["updateAssociation"];
        post?: never;
        /** Delete association */
        delete: operations["deleteAssociation"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/associations/{associationId}/history": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns the change history of the specified association */
        get: operations["getAssociationHistory"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/attachments/{attachmentId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get attachment by id */
        get: operations["getAttachment"];
        put?: never;
        post?: never;
        /** Deletes an attachment */
        delete: operations["deleteAttachment"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/attachments/{attachmentId}/content": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get content of an attachment by id */
        get: operations["getAttachmentContent"];
        /** Update attachment */
        put: operations["updateAttachment"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/attachments/{attachmentId}/history": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns the change history of the specified attachment */
        get: operations["getAttachmentHistory"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/attachments/{attachmentId}/restore": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Restore attachment to previous version */
        put: operations["restoreAttachment"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/baselines": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a project or tracker baseline */
        post: operations["createBaseline"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/branches/{branchId}/item": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get tracker item on branch
         * @description API can be used for finding a tracker item by a branch id
         */
        get: operations["getTrackerItemOnBranch"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/deployment": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Start a deployment process */
        post: operations["uploadDeployment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/deployment/export": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Export projects for deployment */
        post: operations["exportForDeployment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/export/exportToWord": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Exports items to Word
         * @description API can be used for exporting items to Word
         */
        post: operations["exportToWord"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/export/items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Get tracker items
         * @description API can be used for fetching basic information of tracker items
         */
        post: operations["getTrackerItems"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/export/tracker-item-reviews": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Get tracker item reviews by a list of tracker item IDs */
        post: operations["batchGetTrackerItemReviews"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/items/attachments/content": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Get attachments of tracker items matching the extension or mime type filters */
        post: operations["getTrackerItemsAttachmentContents"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/items/fields": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Bulk update fields of a tracker item */
        put: operations["bulkUpdateTrackerItemFields"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/items/move": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Move Tracker Items from the Source Tracker to the Target Tracker
         * @description Move Tracker Items from the Source Tracker to the Target Tracker. The items are optional, if it is not provided all the Tracker Items will be moved from the Source Tracker. All the fields from the Source Tracker must be in the mapping. If you want to ignore one you set the targetField to null in the request.
         */
        post: operations["moveTrackerItems"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/items/move/field-mapping": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Gets the default field mapping between two trackers */
        get: operations["getItemMoveFieldMapping"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/items/query": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get tracker items by cbQL query string */
        get: operations["findTrackerItems"];
        put?: never;
        /**
         * Get tracker items by cbQL query string
         * @description API can be called with a complex cbQL string to find tracker items
         */
        post: operations["findTrackerItemsByCbQL"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/items/relations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Get tracker items related to some tracker items
         * @description Use this endpoint to fetch tracker items related to some specified tracker items. The relations include downstream references, upstream references, incoming associations and outgoing associations of the given items. Relations with entities that are not tracker items (e.g., trackers, projects, URLs, etc.) will not be included in the result.
         */
        post: operations["getBaselineTrackerItemsRelations"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/items/{itemId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get basic tracker item
         * @description API can be used for fetching basic information of a tracker item
         */
        get: operations["getTrackerItem"];
        /** Update tracker item */
        put: operations["updateTrackerItem"];
        post?: never;
        /** Move tracker item to trash */
        delete: operations["deleteTrackerItem"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/items/{itemId}/attachments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get attachments of tracker item */
        get: operations["getTrackerItemAttachments"];
        put?: never;
        /** Upload an attachment to a tracker item */
        post: operations["uploadTrackerItemAttachment"];
        /** Delete attachments of tracker item */
        delete: operations["deleteTrackerItemAttachments"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/items/{itemId}/attachments/content": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get attachments of a tracker item */
        get: operations["getTrackerItemAttachmentContents"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/items/{itemId}/attachments/{attachmentId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get attachment of tracker item by id */
        get: operations["getTrackerItemAttachment"];
        put?: never;
        post?: never;
        /** Delete attachment of tracker item by id */
        delete: operations["deleteTrackerItemAttachment"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/items/{itemId}/attachments/{attachmentId}/content": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get content of an attachment of tracker item by id */
        get: operations["getTrackerItemAttachmentContent"];
        /** Update content of attachment of tracker item */
        put: operations["updateAttachmentOfTrackerItem"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/items/{itemId}/children": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get child items of a tracker item */
        get: operations["findTrackerItemChildren"];
        /** Replace the child item list of a tracker item */
        put: operations["replaceChildrenOfTrackerItem"];
        /** Add a child item to a tracker item */
        post: operations["addChildToTrackerItem"];
        delete?: never;
        options?: never;
        head?: never;
        /** Patch the child item list of a tracker item */
        patch: operations["patchChildrenOfTrackerItem"];
        trace?: never;
    };
    "/v3/items/{itemId}/comments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get comments of tracker item */
        get: operations["getTrackerItemComments"];
        put?: never;
        /** Comment on a tracker item */
        post: operations["commentOnTrackerItem"];
        /** Delete comments of tracker item by item id */
        delete: operations["deleteTrackerItemComments"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/items/{itemId}/comments/{commentId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get comment of tracker item by id */
        get: operations["getTrackerItemComment"];
        /** Edit comment on a tracker item */
        put: operations["editCommentOnTrackerItem"];
        /** Reply on a comment of a tracker item */
        post: operations["replyOnCommentOfTrackerItem"];
        /** Delete comment of tracker item by id */
        delete: operations["deleteTrackerItemComment"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/items/{itemId}/fields": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get fields of a tracker item */
        get: operations["getTrackerItemFields"];
        /** Update fields of a tracker item */
        put: operations["updateCustomFieldTrackerItem"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/items/{itemId}/fields/accessibility": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a tracker item fields accessibility */
        get: operations["getItemAccessibility"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/items/{itemId}/fields/tables/{tableFieldId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update table field of tracker item */
        put: operations["updateTableFieldTrackerItem"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/items/{itemId}/fields/{fieldId}/options": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the options of a choice field of tracker */
        get: operations["getChoiceOptions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/items/{itemId}/history": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get tracker item history
         * @description API can be used for fetching basic information of a tracker item
         */
        get: operations["getTrackerItemHistory"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/items/{itemId}/lock": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Check whether a tracker item is locked, and if it is, retrieve the details of the lock */
        get: operations["checkTrackerItemLock"];
        /** Put a soft lock on a tracker item */
        put: operations["lockTrackerItem"];
        post?: never;
        /** Unlock a tracker item */
        delete: operations["unlockTrackerItem"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/items/{itemId}/relations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get tracker items related to a tracker item
         * @description Use this endpoint to fetch tracker items related to a specified tracker item. The relations include downstream references, upstream references, incoming associations and outgoing associations of the given item. Relations with entities that are not tracker items (e.g., trackers, projects, URLs, etc.) will not be included in the result.
         */
        get: operations["getBaselineTrackerItemRelations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/items/{itemId}/reviews": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all Tracker Item Reviews for a particular Tracker Item */
        get: operations["getTrackerItemReviews"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/items/{itemId}/transitions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get available transitions for a tracker item
         * @description API can be used for getting available transitions for a tracker item
         */
        get: operations["getTrackerItemTransitions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/job/{jobId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve background job information */
        get: operations["getBackgroundJob"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/jobs/working-set-update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create background job to update working-set
         * @description This API can be used start a Job that merges changes from the source into the target Working-Set replacing the content of the specified target trackers completely.
         */
        post: operations["updateWorkingSet"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/jobs/working-set-update-with-transient-fields": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create background job to update working-set supporting transient fields
         * @description This API can be used start a Job that merges changes from the source supporting transient fields as well into the target Working-Set replacing the content of the specified target trackers completely.
         */
        post: operations["updateWorkingSetWithTransientFields"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/migration/attachment": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Migrate attachments
         * @description An endpoint for migrating attachments from a preconfigured source directory.
         */
        post: operations["migrateAttachments"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/projects": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get projects */
        get: operations["getProjects"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/projects/deploy": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Deploy a project configuration to a Project
         * @description The configuration file needs to be uploaded to codebeamer Documents
         */
        post: operations["deployConfiguration"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/projects/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Search projects by given criteria */
        post: operations["searchProjects"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/projects/{projectId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get project */
        get: operations["getProjectById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/projects/{projectId}/all-working-sets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Project level Working-Sets information
         * @description Lists all Working-Sets with minimal information for the given project.
         */
        get: operations["listAllWorkingSetsOfProject"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/projects/{projectId}/content": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Exports the specified project to a zip file */
        post: operations["export"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/projects/{projectId}/members": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all members of a project */
        get: operations["getMembersOfProject"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/projects/{projectId}/members/{userId}/permissions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all roles the user has on a project */
        get: operations["getProjectRolesOfMember"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/projects/{projectId}/trackers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get trackers */
        get: operations["getTrackers"];
        put?: never;
        /** Create a tracker */
        post: operations["createTracker"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/projects/{projectId}/trackers/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Get the list of all trackers in a project */
        post: operations["searchAllTrackersInProject"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/projects/{projectId}/wiki2html": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Render a wiki page as HTML in a specific context */
        post: operations["renderWikiMarkup"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/projects/{projectId}/wikipages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get wiki pages of a project */
        get: operations["getTopLevelWikiPages"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/projects/{projectId}/working-sets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Project level Working-Sets information
         * @description Lists top-level Working-Sets minimal information for the given project.
         */
        get: operations["listWorkingSetsOfProject"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/reports": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a report */
        post: operations["createReport"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/reports/{reportId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update report settings */
        put: operations["updateReport"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/reports/{reportId}/items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a report items by id of the report */
        get: operations["getReportItemsById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/reports/{reportId}/results": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a report results by id of the report */
        get: operations["getReportById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/roles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get roles */
        get: operations["getRoles"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/roles/{roleId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get role */
        get: operations["getRole"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/sysadmin/audit/permissions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Get audit permission entries */
        post: operations["getAuditPermissions"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/system/maintenance": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get system maintenance status */
        get: operations["getSystemStatus"];
        /** Set system maintenance status */
        put: operations["setSystemStatus"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/testcases/autoApplyStepReuses": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Find duplicate TestSteps in a set of TestCases and converting duplicates to Reuses */
        post: operations["autoApplyStepReuses"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/testruns/{testRunId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update result of a Test Run.  */
        put: operations["updateTestRunResult"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/traceability/items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Get initial ids
         * @description Get traceability initial ids!
         */
        post: operations["getTraceabilityInitialItemIds"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/traceability/relations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Get traceability level item ids
         * @description Get traceability item ids!
         */
        post: operations["getTraceabilityLevelItemIds"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/tracker/configuration": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create or update tracker configuration */
        post: operations["postTrackerConfiguration"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/tracker/{trackerId}/configuration": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get tracker configuration */
        get: operations["getTrackerConfiguration"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/trackers/permissions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get available tracker permissions */
        get: operations["getTrackerPermissions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/trackers/permissions/{trackerPermissionId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the immutable definition of a tracker permission */
        get: operations["getTrackerPermission"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/trackers/projects/{projectId}/repository": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create an external scm repository item */
        post: operations["createExternalScmRepository"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/trackers/projects/{projectId}/repository/{repositoryId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update an external scm repository item */
        put: operations["updateExternalScmRepository"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/trackers/tree": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List tracker tree */
        get: operations["listTrackerTree"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/trackers/tree/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Update tracker tree */
        post: operations["updateTrackerTree"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/trackers/types": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the list of tracker types */
        get: operations["getTrackerTypes"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/trackers/types/{trackerTypeId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the immutable definition of a tracker type */
        get: operations["getTrackerType"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/trackers/{testRunTrackerId}/automatedtestruns": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a new test run for large number of automated test cases
         * @description Upload large amount of automated test case run results into a single test run. This process may take a while, please check your proxy settings to prevent timeout.
         */
        post: operations["uploadAutomatedTestResults"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/trackers/{testRunTrackerId}/testruns": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a new test run for test cases or test sets
         * @description For multiple test sets please use trackers/{testRunTrackerId}/testruns/generatefromtestset endpoint.
         */
        post: operations["createTestRunForTestCase"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/trackers/{testRunTrackerId}/testruns/generatefromtestset": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a new test run for test cases or test sets */
        post: operations["createTestRunForTestSets"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/trackers/{trackerId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get tracker */
        get: operations["getTracker"];
        /** Updates a specific tracker */
        put: operations["updateTracker"];
        post?: never;
        /** Deletes a tracker */
        delete: operations["deleteTracker"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/trackers/{trackerId}/baselines": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get baselines of a specific tracker */
        get: operations["getTrackerBaselines"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/trackers/{trackerId}/children": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get child items of a tracker item */
        get: operations["findTrackerChildren"];
        /** Reorder the child item list of a tracker */
        put: operations["replaceChildrenOfTracker"];
        /** Add a child item to a tracker item */
        post: operations["addChildToTracker"];
        delete?: never;
        options?: never;
        head?: never;
        /** Patch the child item list of a tracker item */
        patch: operations["patchChildrenOfTracker"];
        trace?: never;
    };
    "/v3/trackers/{trackerId}/fields": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get fields of tracker */
        get: operations["getTrackerFields"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/trackers/{trackerId}/fields/permissions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get permissions of all fields of a tracker */
        get: operations["getTrackerFieldsPermissions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/trackers/{trackerId}/fields/{fieldId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get field of tracker */
        get: operations["getTrackerField"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/trackers/{trackerId}/fields/{fieldId}/options/{optionId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get option of a choice field of tracker */
        get: operations["getChoiceOption"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/trackers/{trackerId}/fields/{fieldId}/permissions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get permissions of tracker field */
        get: operations["getTrackerFieldPermissions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/trackers/{trackerId}/icon": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Upload a tracker icon */
        put: operations["updateTrackerIcon"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/trackers/{trackerId}/items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get items in a specific tracker */
        get: operations["getItemsByTracker"];
        put?: never;
        /** Create a tracker item */
        post: operations["createTrackerItem"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/trackers/{trackerId}/outline": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get outline of a specific tracker */
        get: operations["getTrackerOutline"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/trackers/{trackerId}/permissions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List tracker permissions per role
         * @description API can be used to list tracker permissions per roles, filtering is possible by user, user and on of the user's role, or just by role
         */
        get: operations["getTrackerPermissionsWithRoles"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/trackers/{trackerId}/reports": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all reports of a specific tracker */
        get: operations["getTrackerReports"];
        put?: never;
        /** Creates a report of a specific tracker */
        post: operations["createTrackerReport"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/trackers/{trackerId}/reports/{reportId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Updates a report of a specific tracker */
        put: operations["updateTrackerReport"];
        post?: never;
        /** Deletes a report of a specific tracker */
        delete: operations["deleteTrackerReport"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/trackers/{trackerId}/reports/{reportId}/items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get report items of a specific tracker view */
        get: operations["getTrackerReportItems"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/trackers/{trackerId}/reports/{reportId}/results": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a report of a specific tracker */
        get: operations["getTrackerReport"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/trackers/{trackerId}/roles/{roleId}/permissions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Set the tracker permissions for a specific role */
        put: operations["updatePermission"];
        post?: never;
        /** Removes all tracker permissions from a specific role */
        delete: operations["removePermissions"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/trackers/{trackerId}/schema": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the schema of a tracker */
        get: operations["getTrackerSchema"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/trackers/{trackerId}/transitions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all transitions of a specific tracker */
        get: operations["getTrackerTransitions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/trackers/{trackerId}/working-sets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Lists Working-Sets
         * @description Lists Working-Sets that contain the given Tracker or Branch.
         */
        get: operations["getTrackerWorkingSets"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get users */
        get: operations["getUsers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/users/findByEmail": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get user by email address */
        get: operations["getUserByEmail"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/users/findByName": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get user by name */
        get: operations["getUserByName"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/users/groups": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get user groups */
        get: operations["getGroups"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/users/groups/{groupId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get user group */
        get: operations["getGroup"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/users/groups/{groupId}/members": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all members of a user group */
        get: operations["getGroupMembers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/users/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Search users */
        post: operations["searchUsers"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/users/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get user */
        get: operations["getUser"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/wikipages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a new wiki page */
        post: operations["createWikiPage"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/wikipages/{itemId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update and/or move a wiki page */
        put: operations["updateWikiPage"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/wikipages/{wikiId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get wiki page */
        get: operations["getWikiPage"];
        put?: never;
        post?: never;
        /** Delete a wiki page by its ID */
        delete: operations["deleteWikiPage"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/wikipages/{wikiId}/attachments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get attachment of wiki page by file name */
        get: operations["getAttachmentByName"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/wikipages/{wikiId}/comments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Comment on a wiki page */
        post: operations["commentOnWiki"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/wikipages/{wikiId}/history": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns the change history of the specified wiki page */
        get: operations["getWikiPageHistory"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/wikipages/{wikiId}/html": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Render a wiki page as HTML */
        get: operations["renderWikiPage"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/wikipages/{wikiId}/lock": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Check whether a wiki page is locked, and if it is, retrieve the details of the lock */
        get: operations["checkWikiPageLock"];
        /** Lock a wiki page */
        put: operations["lockWikiPage"];
        post?: never;
        /** Unlock a wiki page */
        delete: operations["unlockWikiPage"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/wikipages/{wikiId}/permissions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get permissions of a wiki page */
        get: operations["getWikiPermissions"];
        /** Set permissions of a wiki page */
        put: operations["setWikiPermissions"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/wikipages/{wikiId}/restorecontent": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Restores the content from a previous version of a wiki page */
        put: operations["restoreWikiPageContent"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/working-sets/items-mapping": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Maps Tracker Items in Working-Set
         * @description Maps Tracker Items to the corresponding Tracker Items in target Working-Set.
         */
        post: operations["getItemsMappingInWorkingSet"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/working-sets/{workingSetId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Working-Set information
         * @description Gets the Working-Set information for the given id.
         */
        get: operations["getWorkingSetInformation"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/working-sets/{workingSetId}/trackers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         *  Lists the trackers in a Working-Set
         * @description Lists the trackers (shared and included) in the given Working-Set.
         */
        get: operations["getWorkingSetTrackers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/workingset/{workingSetId}/permission": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Set the trackers permissions for specific roles in the given workingset */
        post: operations["updateWorkingSetPermission"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description Status information of a background job */
        AbstractBackgroundJobStatusInfo: {
            /**
             * Format: int32
             * @description Progress in percentage (calculated based on pre-set weights)
             */
            progressPercentage?: number;
            /** @description Step currently in progress */
            stepInProgress?: string;
            /** @description Type of status info object */
            type?: string;
        };
        /** @description Baseline used when creating the working set */
        AbstractBaselineReferenceModel: {
            /**
             * Format: int32
             * @description Id of the entity
             */
            id?: number;
            /** @description Name of the entity */
            name?: string;
            /** @description Type of a referenced object */
            type?: string;
        };
        /** @description Abstract field */
        AbstractField: {
            /** @description Description of a field */
            description?: string;
            /** @description Formula value of a field */
            formula?: string;
            /** @description Visibility status of a field */
            hidden?: boolean;
            /** @description Hide If dependency formula value of a field */
            hideIfDependencyFormula?: string;
            /**
             * Format: int32
             * @description Id of a field
             */
            id?: number;
            /** @description Identifier matching the legacy REST API naming */
            legacyRestName?: string;
            /** @description Mandatory If dependency formula value of a field */
            mandatoryIfDependencyFormula?: string;
            /** @description List of statuses where the field is mandatory. */
            mandatoryInStatuses?: components["schemas"]["ChoiceOptionReference"][];
            /** @description Name of a field */
            name?: string;
            /** @description List of shared fields assigned to this field */
            sharedFields?: components["schemas"]["SharedFieldReference"][];
            /** @description Title of a field */
            title?: string;
            /** @description Tracker item's field name for this field */
            trackerItemField?: string;
            /** @description Type of a field */
            type?: string;
            /** @description Name of the updater/getter value model */
            valueModel?: string;
        };
        /** @description Value container of a field */
        AbstractFieldValue: {
            /**
             * Format: int32
             * @description Id of the field
             */
            fieldId?: number;
            /** @description Name of the field */
            name?: string;
            /** @description The name of a shared field assigned to the field. This can be specified as an alternative to fieldId. */
            sharedFieldName?: string;
            /** @description The names of a shared fields assigned to the field. */
            sharedFieldNames?: string[];
            /** @description Type of the field */
            type: string;
        };
        /** @description Abstract outline entity */
        AbstractOutline: {
            /** @description Indexes of the entity in the outline. */
            outlineIndexes?: components["schemas"]["OutlineIndex"][];
            /** @description Type of the outline model */
            type?: string;
        };
        /** @description Reference to an item */
        AbstractReference: {
            /**
             * Format: int32
             * @description Id of the entity
             */
            id?: number;
            /** @description Name of the entity */
            name?: string;
            /** @description Type of a referenced object */
            type?: string;
        };
        /** @description Update of an item's field */
        AbstractTrackerItemChange: {
            field?: components["schemas"]["FieldReference"];
            /** @description Name of the field */
            name?: string;
            newValue?: components["schemas"]["AbstractFieldValue"];
            oldValue?: components["schemas"]["AbstractFieldValue"];
            /** @description Change model type */
            type?: string;
        };
        /** @description Reference to an item */
        AbstractTrackerItemReference: {
            /**
             * @description Id of the reference/association
             * @example 12142
             */
            id?: string;
            itemRevision?: components["schemas"]["TrackerItemRevision"];
            /**
             * @description Type of the relation
             * @example DownstreamTrackerItemReference
             */
            type?: string;
        };
        /** @description Access permission of specific role */
        AccessPermission: {
            /**
             * @description Access level
             * @enum {string}
             */
            accessLevel?: "NONE" | "READ" | "WRITE" | "READ_WRITE";
            field?: components["schemas"]["FieldReference"];
            project?: components["schemas"]["ProjectReference"];
            role?: components["schemas"]["RoleReference"];
        };
        /** @description Request model to provide permissions. */
        AccessPermissionsRequest: {
            /** @description List of access permissions. */
            permissions?: components["schemas"]["AccessPermission"][];
        };
        /** @description Reference to an artifact */
        ArtifactReference: {
            type: "ArtifactReference";
        } & Omit<components["schemas"]["AbstractReference"], "type">;
        /** @description Artifact reference field */
        ArtifactReferenceField: {
            type: "ArtifactReferenceField";
        } & Omit<components["schemas"]["AbstractField"], "type">;
        /** @description Model for a specific version of an artifact */
        ArtifactRevision: {
            /** @description Summary of the change */
            changeSummary?: string;
            /**
             * Format: int32
             * @description Id of the entity
             */
            id?: number;
            /**
             * Format: date-time
             * @description The date when the entity was modified
             */
            modifiedAt?: string;
            modifiedBy?: components["schemas"]["UserReference"];
            /**
             * Format: int32
             * @description Version of the artifact
             */
            version?: number;
        };
        /** @description One page of artifact revisions. */
        ArtifactRevisionSearchResult: {
            /**
             * Format: int32
             * @description Index of the page
             */
            page?: number;
            /**
             * Format: int32
             * @description Size of the found page
             */
            pageSize?: number;
            /** @description Found artifact revision */
            revisions?: components["schemas"]["ArtifactRevision"][];
            /**
             * Format: int32
             * @description Number of matched tracker items by the search criteria
             */
            total?: number;
        };
        /** @description Basic properties of a codebeamer association */
        Association: {
            /**
             * Format: int32
             * @description Baseline ID
             * @example 1
             */
            baselineId?: number;
            /**
             * @description Bi-directional reference
             * @example true
             */
            biDirectionalPropagation?: boolean;
            /**
             * Format: date-time
             * @description The date when the entity was created
             */
            createdAt?: string;
            createdBy?: components["schemas"]["UserReference"];
            /** @description Description of the entity */
            description?: string;
            /**
             * @description Description format of the entity
             * @enum {string}
             */
            descriptionFormat?: "PlainText" | "Html" | "Wiki";
            from: components["schemas"]["AbstractReference"];
            /**
             * Format: int32
             * @description Id of the entity
             */
            id?: number;
            /** @description Name of the entity */
            name?: string;
            /**
             * @description Propagating dependencies
             * @example true
             */
            propagatingDependencies?: boolean;
            /**
             * @description Propagating suspects
             * @example true
             */
            propagatingSuspects?: boolean;
            /**
             * @description Reverse propagation
             * @example true
             */
            reversePropagation?: boolean;
            to?: components["schemas"]["AbstractReference"];
            type?: components["schemas"]["AssociationTypeReference"];
            /** @description Association to url */
            url?: string;
        };
        /** @description Basic properties of a codebeamer association type */
        AssociationType: {
            /** @description Description of the entity */
            description?: string;
            /**
             * @description Description format of the entity
             * @enum {string}
             */
            descriptionFormat?: "PlainText" | "Html" | "Wiki";
            /**
             * Format: int32
             * @description Id of the entity
             */
            id?: number;
            /** @description Name of the entity */
            name?: string;
        };
        /** @description Reference to an association type */
        AssociationTypeReference: {
            type: "AssociationTypeReference";
        } & Omit<components["schemas"]["AbstractReference"], "type">;
        /** @description Attachments of a comment */
        Attachment: {
            /**
             * Format: date-time
             * @description The date when the entity was created
             */
            createdAt?: string;
            createdBy?: components["schemas"]["UserReference"];
            /** @description Description of the entity */
            description?: string;
            /**
             * @description Description format of the entity
             * @enum {string}
             */
            descriptionFormat?: "PlainText" | "Html" | "Wiki";
            /**
             * Format: int32
             * @description Id of the entity
             */
            id?: number;
            /**
             * Format: date-time
             * @description The date when the entity was modified
             */
            modifiedAt?: string;
            modifiedBy?: components["schemas"]["UserReference"];
            /** @description Name of the entity */
            name?: string;
            /** @description Hash of an attachment */
            sha512?: string;
            /**
             * Format: int64
             * @description Size of an attachment
             */
            size?: number;
            /**
             * Format: int32
             * @description Version of an attachment
             */
            version?: number;
        };
        /** @description Request for migrating attachments */
        AttachmentMigrationRequest: {
            /**
             * Format: date-time
             * @description The date when the entity was created
             */
            createdAt?: string;
            createdBy?: components["schemas"]["UserReference"];
            /** @description Description of the entity */
            description?: string;
            /**
             * @description Description format of the entity
             * @enum {string}
             */
            descriptionFormat?: "PlainText" | "Html" | "Wiki";
            /** @description List of files to migrate */
            files?: components["schemas"]["RemoteMigrationFile"][];
            /**
             * @description Type of action made on the source files.
             * @enum {string}
             */
            migrationAction?: "MOVE" | "COPY";
            /**
             * Format: date-time
             * @description The date when the entity was modified
             */
            modifiedAt?: string;
            modifiedBy?: components["schemas"]["UserReference"];
            targetItem?: components["schemas"]["TrackerItemReference"];
        };
        /** @description Reference to an attachment */
        AttachmentReference: {
            type: "AttachmentReference";
        } & Omit<components["schemas"]["AbstractReference"], "type">;
        /** @description One page of attachments. */
        AttachmentSearchResult: {
            /** @description Found attachments */
            attachments?: components["schemas"]["Attachment"][];
            /**
             * Format: int32
             * @description Index of the page
             */
            page?: number;
            /**
             * Format: int32
             * @description Size of the found page
             */
            pageSize?: number;
            /**
             * Format: int32
             * @description Number of matched tracker items by the search criteria
             */
            total?: number;
        };
        /** @description Message column model */
        AuditPermissionMessage: {
            /** @description Used to show impacted user details. */
            value?: string;
        };
        /** @description Information of audit permission entry */
        AuditPermissions: {
            /** @description Artifact or target user name */
            artifact?: string;
            /**
             * Format: date-time
             * @description Created at date
             */
            createdAt?: string;
            /** @description Event type */
            eventType?: string;
            message?: components["schemas"]["AuditPermissionMessage"];
            /** @description Project name */
            project?: string;
            /** @description Tracker name */
            tracker?: string;
            /** @description User name */
            user?: string;
            /** @description User activation status */
            userStatus?: string;
        };
        /** @description Request model for audit permissions */
        AuditPermissionsRequest: {
            /**
             * @description duration
             * @enum {string}
             */
            duration?: "TODAY" | "THIS_WEEK" | "THIS_MONTH" | "THIS_QUARTER" | "THIS_YEAR" | "YESTERDAY" | "LAST_2_DAYS" | "LAST_5_DAYS" | "LAST_7_DAYS" | "LAST_10_DAYS" | "LAST_30_DAYS" | "LAST_365_DAYS";
            /** @description Event type names */
            eventTypes: string[];
            /**
             * Format: date-time
             * @description From date
             */
            fromDate?: string;
            /** @description Project ids */
            projectIds?: number[];
            /**
             * @description Show changes
             * @default false
             */
            showChanges: boolean;
            /** @description Target usernames */
            targetUserNames?: string[];
            /**
             * Format: date-time
             * @description To date
             */
            toDate?: string;
            /** @description Tracker ids */
            trackerIds?: number[];
            /** @description User names */
            userNames?: string[];
        };
        /** @description Specifies which Test Cases are checked for duplicate Steps */
        AutoApplyTestStepReuses: {
            /** @description If it scans/finds the duplicate Steps in Test Case libraries of the user? Note: that only Reusable Steps will be reused from these libraries! */
            scanTestCaseLibraries?: boolean;
            /** @description The Test Cases to find the duplicated steps inside: if these Test Cases has duplicated Steps these will be converted to Step-Reuses. */
            testCases?: components["schemas"]["TrackerItemReference"][];
        };
        /** @description Request model to create a test run from test case */
        AutomatedTestCaseRunResult: {
            /** @description Optional Test Case Run conclusion */
            conclusion?: string;
            /** @description Description of the Test Case */
            description?: string;
            /** @description Group name of the Test Case */
            groupName?: string;
            /** @description Name of the Test Case */
            name: string;
            /**
             * @description Result of the test case
             * @enum {string}
             */
            result: "PASSED" | "FAILED" | "BLOCKED" | "NOT_APPLICABLE";
            /**
             * Format: int32
             * @description Optional runtime in seconds
             */
            runTime?: number;
        };
        /** @description Request model to create a test run from test case runs */
        AutomatedTestRunRequest: {
            /** @description Flag to create new test cases from testResults if necessary */
            createNonExistentTestCases?: boolean;
            /**
             * Format: int32
             * @description ID of the Test Case tracker
             */
            testCaseTrackerId: number;
            /** @description Test case results to include into the test run */
            testResults: components["schemas"]["AutomatedTestCaseRunResult"][];
            testRunModel?: components["schemas"]["TrackerItem"];
        };
        /** @description Information about a background job */
        BackgroundJob: {
            /**
             * @description Status of a background job
             * @enum {string}
             */
            backgroundJobStatus?: "DRAFT" | "NEW" | "IN_PROGRESS" | "FINISHED";
            /** @description Type of job */
            backgroundJobType?: string;
            /**
             * Format: date-time
             * @description Creation time of job
             */
            createdAt?: string;
            /** @description Description of job */
            description?: string;
            /**
             * Format: date-time
             * @description Completion time of job
             */
            finishedAt?: string;
            /**
             * Format: int32
             * @description ID of job
             */
            id?: number;
            statusInfo?: components["schemas"]["AbstractBackgroundJobStatusInfo"];
            /** @description Sub-steps of a job */
            steps?: components["schemas"]["BackgroundJobStep"][];
            submittedBy?: components["schemas"]["UserReference"];
        };
        /** @description Information about a background job step */
        BackgroundJobStep: {
            /**
             * Format: int32
             * @description Id of the background job step
             */
            id?: number;
            /** @description Name of the background job step */
            name?: string;
            /**
             * @description Result of a background job step
             * @enum {string}
             */
            result?: "SUCCESSFUL" | "FAILED";
            /** @description Result message of the background job step */
            resultMessage?: string;
            /**
             * @description Status of a background job step
             * @enum {string}
             */
            status?: "NEW" | "IN_PROGRESS" | "FINISHED";
        };
        BadRequestException: {
            message?: string;
            resourceUri?: string;
        };
        /** @description Describes a Choice Option field configuration. */
        BaseTrackerFieldChoiceOption: {
            type: string;
        };
        /** @description Describes the permission of a Tracker Field. */
        BaseTrackerFieldPermission: {
            type: string;
        };
        /** @description Properties of a baseline */
        Baseline: {
            /** @description Description of the entity */
            description?: string;
            /**
             * @description Description format of the entity
             * @enum {string}
             */
            descriptionFormat?: "PlainText" | "Html" | "Wiki";
            /**
             * Format: int32
             * @description Id of the entity
             */
            id?: number;
            /** @description Name of the entity */
            name?: string;
            project?: components["schemas"]["ProjectReference"];
            tracker?: components["schemas"]["TrackerReference"];
        };
        /** @description Request model to fetch Tracker Item Reviews for multiple Tracker Items. */
        BatchGetTrackerItemReviewsRequest: {
            /**
             * Format: int32
             * @description Optional Baseline ID
             */
            baselineId?: number;
            /** @description List of Tracker Item IDs */
            itemIds?: number[];
        };
        /** @description Bool field */
        BoolField: {
            type: "BoolField";
        } & Omit<components["schemas"]["AbstractField"], "type">;
        /** @description Value container of a bool field */
        BoolFieldValue: {
            type: "BoolFieldValue";
        } & (Omit<WithRequired<components["schemas"]["AbstractFieldValue"], "type">, "type"> & {
            /** @description Value of the field */
            value?: boolean;
        });
        BranchReference: {
            type: "BranchReference";
        } & Omit<components["schemas"]["AbstractReference"], "type">;
        /** @description Holds the response of a bulk operation */
        BulkOperationResponse: {
            /** @description List of failed operations */
            failedOperations?: components["schemas"]["FailedOperation"][];
            /**
             * Format: int32
             * @description Count of successful operations
             */
            successfulOperationsCount?: number;
        };
        /** @description Describes a Documents Choice Option field configuration. */
        ChoiceDocuments: Omit<components["schemas"]["BaseTrackerFieldChoiceOption"], "type"> & {
            referenceFilters?: components["schemas"]["ReferenceFilterBasedChoice.ReferenceFilter"][];
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "CHOICE_DOCUMENTS";
        };
        /** @description This model holds choice field values. */
        ChoiceFieldMultiValue: {
            type: "ChoiceFieldMultiValue";
        } & (Omit<WithRequired<components["schemas"]["AbstractFieldValue"], "type">, "type"> & {
            /** @description Is field applicable for multiple select. */
            multipleSelection?: boolean;
            /** @description Values of the choice option field */
            values?: components["schemas"]["AbstractReference"][];
        });
        /** @description Reference container of a choice option field */
        ChoiceFieldValue: {
            type: "ChoiceFieldValue";
        } & (Omit<WithRequired<components["schemas"]["AbstractFieldValue"], "type">, "type"> & {
            /** @description Values of the choice option field */
            values?: components["schemas"]["AbstractReference"][];
        });
        /** @description Describes a Members Choice Option field configuration. */
        ChoiceMembers: Omit<components["schemas"]["BaseTrackerFieldChoiceOption"], "type"> & {
            membersTypeDataSourceTypes?: ("USERS" | "GROUPS" | "ROLES")[];
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "MEMBERS";
        };
        /** @description Reference to a choice option */
        ChoiceOptionReference: {
            type: "ChoiceOptionReference";
        } & Omit<components["schemas"]["AbstractReference"], "type">;
        /** @description Describes an Options Choice Option field configuration. */
        ChoiceOptions: Omit<components["schemas"]["BaseTrackerFieldChoiceOption"], "type"> & {
            choiceOptions?: components["schemas"]["ChoiceOptions.ChoiceOption"][];
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "CHOICE_OPTIONS";
        };
        /** @description Describes a Choice Option item configuration. */
        "ChoiceOptions.ChoiceOption": {
            color?: string;
            defaultInStatuses?: number[];
            description?: string;
            /** Format: int32 */
            id?: number;
            meanings?: ("OBSOLETE" | "IN_PROGRESS" | "RESOLVED" | "CLOSED" | "FOLDER" | "INFORMATION" | "SUCCESSFUL")[];
            name?: string;
            restrictedToStatuses?: number[];
        };
        /** @description Describes a Projects Choice Option field configuration. */
        ChoiceProjects: Omit<components["schemas"]["BaseTrackerFieldChoiceOption"], "type"> & {
            referenceFilters?: components["schemas"]["ReferenceFilterBasedChoice.ReferenceFilter"][];
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "CHOICE_PROJECTS";
        };
        /** @description Describes a Repositories Choice Option field configuration. */
        ChoiceRepositories: Omit<components["schemas"]["BaseTrackerFieldChoiceOption"], "type"> & {
            referenceFilters?: components["schemas"]["ReferenceFilterBasedChoice.ReferenceFilter"][];
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "CHOICE_REPOSITORIES";
        };
        /** @description Describes a Trackers Choice Option field configuration. */
        ChoiceTrackers: Omit<components["schemas"]["BaseTrackerFieldChoiceOption"], "type"> & {
            referenceFilters?: components["schemas"]["ReferenceFilterBasedChoice.ReferenceFilter"][];
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "CHOICE_TRACKERS";
        };
        /** @description Describes a Users Choice Option field configuration. */
        ChoiceUsers: Omit<components["schemas"]["BaseTrackerFieldChoiceOption"], "type"> & {
            referenceFilters?: components["schemas"]["ReferenceFilterBasedChoice.ReferenceFilter"][];
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "CHOICE_USERS";
        };
        /** @description Describes a Work Config Items Choice Option field configuration. */
        ChoiceWorkConfigItems: Omit<components["schemas"]["BaseTrackerFieldChoiceOption"], "type"> & {
            referenceFilters?: components["schemas"]["ReferenceFilterBasedChoice.ReferenceFilter"][];
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "CHOICE_WORK_CONFIG_ITEMS";
        };
        /** @description Color field */
        ColorField: {
            type: "ColorField";
        } & Omit<components["schemas"]["AbstractField"], "type">;
        /** @description Value container of a color field */
        ColorFieldValue: {
            type: "ColorFieldValue";
        } & (Omit<WithRequired<components["schemas"]["AbstractFieldValue"], "type">, "type"> & {
            /**
             * @description Hex code of the color
             * @example #FF0055
             */
            value?: string;
        });
        /** @description Comment of a tracker item */
        Comment: {
            /** @description Attachments of a comment */
            attachments?: components["schemas"]["Attachment"][];
            /** @description Text of a comment */
            comment?: string;
            /**
             * @description Format of a comment
             * @enum {string}
             */
            commentFormat?: "PlainText" | "Html" | "Wiki";
            /**
             * Format: date-time
             * @description The date when the entity was created
             */
            createdAt?: string;
            createdBy?: components["schemas"]["UserReference"];
            /**
             * Format: int32
             * @description Id of the entity
             */
            id?: number;
            /**
             * Format: date-time
             * @description The date when the entity was modified
             */
            modifiedAt?: string;
            modifiedBy?: components["schemas"]["UserReference"];
            /** @description Name of the entity */
            name?: string;
            parent?: components["schemas"]["CommentReference"];
            /**
             * Format: int32
             * @description Version of a comment
             */
            version?: number;
        };
        /** @description Reference to a comment of a tracker item */
        CommentReference: {
            type: "CommentReference";
        } & Omit<components["schemas"]["AbstractReference"], "type">;
        /** @description Country field */
        CountryField: {
            type: "CountryField";
        } & (Omit<components["schemas"]["AbstractField"], "type"> & {
            availableOptions?: string[];
            /** @description Multiple values state of a field */
            multipleValues?: boolean;
        });
        /** @description This model holds country field values. */
        CountryFieldMultiValue: {
            type: "CountryFieldMultiValue";
        } & (Omit<WithRequired<components["schemas"]["AbstractFieldValue"], "type">, "type"> & {
            /** @description Is field applicable for multiple select. */
            multipleSelection?: boolean;
            /** @description Country codes */
            values?: string[];
        });
        /** @description Value container of a country field */
        CountryFieldValue: {
            type: "CountryFieldValue";
        } & (Omit<WithRequired<components["schemas"]["AbstractFieldValue"], "type">, "type"> & {
            /** @description Country codes */
            values?: string[];
        });
        CreateBaselineRequest: {
            /** @description Description of baseline */
            description?: string;
            /** @description Name of baseline */
            name: string;
            project: components["schemas"]["ProjectReference"];
            tracker?: components["schemas"]["TrackerReference"];
        };
        /** @description Request model to create a test run from multiple test sets */
        CreateTestRunFromTestSetsRequest: {
            /**
             * @description Generate Test Runs only from accepted Test Cases.
             * @default false
             */
            runOnlyAcceptedTestCases: boolean;
            testRunModel?: components["schemas"]["TrackerItem"];
            /** @description Test set ids to include into the test run. Only the first test set will be considered. */
            testSetRefs?: components["schemas"]["TrackerItemReference"][];
        };
        /** @description Request model to create a test run from multiple test cases or 1 test set */
        CreateTestRunRequest: {
            /**
             * @description Generate Test Runs only from accepted Test Cases.
             * @default false
             */
            runOnlyAcceptedTestCases: boolean;
            testCaseIds?: components["schemas"]["TrackerItemReference"][];
            /** @description Test case ids to include into the test run */
            testCaseRefs?: components["schemas"]["TrackerItemReference"][];
            testRunModel?: components["schemas"]["TrackerItem"];
            testSetIds?: components["schemas"]["TrackerItemReference"][];
            /** @description Test set ids to include into the test run. Only the first test set will be considered. */
            testSetRefs?: components["schemas"]["TrackerItemReference"][];
        };
        /** @description Dependency information between two projects. */
        CrossProjectDependency: {
            /** @description Information on where references were found in source project. */
            referredFrom?: components["schemas"]["DependencyAttribute"][];
            sourceProject?: components["schemas"]["ProjectReference"];
            targetProject?: components["schemas"]["ProjectReference"];
        };
        /** @description Date field */
        DateField: {
            type: "DateField";
        } & Omit<components["schemas"]["AbstractField"], "type">;
        /** @description Value container of a date field */
        DateFieldValue: {
            type: "DateFieldValue";
        } & (Omit<WithRequired<components["schemas"]["AbstractFieldValue"], "type">, "type"> & {
            /**
             * Format: date-time
             * @description Date value
             */
            value?: string;
        });
        /** @description Decimal field */
        DecimalField: {
            type: "DecimalField";
        } & (Omit<components["schemas"]["AbstractField"], "type"> & {
            /**
             * Format: double
             * @description Maximum value of a field
             */
            max?: number;
            /**
             * Format: double
             * @description Minimum value of a field
             */
            min?: number;
        });
        /** @description Value container of a double field */
        DecimalFieldValue: {
            type: "DecimalFieldValue";
        } & (Omit<WithRequired<components["schemas"]["AbstractFieldValue"], "type">, "type"> & {
            /**
             * Format: double
             * @description Double value
             */
            value?: number;
        });
        /** @description Basic status information of a background job */
        DefaultBackgroundJobStatusInfo: {
            type: "DefaultBackgroundJobStatusInfo";
        } & Omit<components["schemas"]["AbstractBackgroundJobStatusInfo"], "type">;
        /** @description This model holds default values for custom fields. */
        DefaultFieldSingleValue: {
            type: "DefaultFieldSingleValue";
        } & Omit<WithRequired<components["schemas"]["AbstractFieldValue"], "type">, "type">;
        /** @description This model holds default values for custom fields which are multiple select. */
        DefaultMultiFieldValue: {
            type: "DefaultMultiFieldValue";
        } & (Omit<WithRequired<components["schemas"]["AbstractFieldValue"], "type">, "type"> & {
            /** @description Is field applicable for multiple select. */
            multipleSelection?: boolean;
            values?: string[];
        });
        /** @description Information on how and where references were found in source project. */
        DependencyAttribute: {
            /**
             * @description Direction in which dependency finder discovered the reference.
             * @enum {string}
             */
            lookupDirection?: "Forward" | "Bidirectional";
            /** @description Trace in source project model where the reference was found. */
            path?: components["schemas"]["DependencyEntityReference"][];
        };
        /** @description Reference to an entity in dependency path */
        DependencyEntityReference: {
            type: "DependencyEntityReference";
        } & (Omit<components["schemas"]["AbstractReference"], "type"> & {
            /**
             * Format: int32
             * @description Type ID of entity
             */
            typeId?: number;
        });
        /** @description Status information of a dependency finder job */
        DependencyFinderJobStatusInfo: {
            type: "DependencyFinderJobStatusInfo";
        } & (Omit<components["schemas"]["AbstractBackgroundJobStatusInfo"], "type"> & {
            /** @description Warnings due to closed projects. */
            closedProjectWarnings?: string[];
            /** @description Dependencies found among projects. */
            dependencies?: components["schemas"]["CrossProjectDependency"][];
            /** @description Permission warnings. */
            missingPermissionWarnings?: string[];
            /**
             * Format: int32
             * @description Number of projects already checked for dependencies
             */
            projectsChecked?: number;
            /**
             * Format: int32
             * @description Number of projects scheduled for dependency collection
             */
            projectsScheduled?: number;
        });
        DeployProject: {
            /**
             * Format: int32
             * @description Id of a codebeamer document
             */
            configurationFileId?: number;
            /** @description The password to decrypt the uploaded configuration file */
            password?: string;
            project?: components["schemas"]["ProjectReference"];
            /**
             * Format: int32
             * @description Id of a codebeamer document
             */
            projectFileId?: number;
        };
        DeploymentModel: {
            /** @description Import tracker inheritance. This is controlled by Application Configuration. Can be true if this configuration is enabled. */
            importTrackerHierarchy?: boolean;
            /** @description Deployment files */
            imports: string[];
            /** @description Import file password */
            password?: string;
            /** @description Skip refresh computed fields on tracker items */
            skipRefreshComputedFields?: boolean;
        };
        /** @description Project export settings for deployment */
        DeploymentProjectExportSettings: {
            /** @description Flag if queries are included. */
            includeQueries?: boolean;
            /** @description Flag if tracker items are included. */
            includeTrackerItems?: boolean;
            /** @description Flag if trackers are included. */
            includeTrackers?: boolean;
            /**
             * Format: int32
             * @description Project id
             */
            projectId: number;
            /** @description Tracker export settings */
            trackers?: components["schemas"]["DeploymentTrackerExportSettings"][];
        };
        /** @description Tracker export settings for deployment */
        DeploymentTrackerExportSettings: {
            /** @description Flag if tracker items are included. */
            itemsIncluded?: boolean;
            /**
             * Format: int32
             * @description Project id
             */
            trackerId: number;
        };
        /** @description Reference pointing to another item */
        DownstreamTrackerItemReference: {
            type: "DownstreamTrackerItemReference";
        } & Omit<components["schemas"]["AbstractTrackerItemReference"], "type">;
        /** @description Duration field */
        DurationField: {
            type: "DurationField";
        } & (Omit<components["schemas"]["AbstractField"], "type"> & {
            /** @description Maximum value of a field */
            max?: string;
            /** @description Minimum value of a field */
            min?: string;
        });
        /** @description Value container of a duration field */
        DurationFieldValue: {
            type: "DurationFieldValue";
        } & (Omit<WithRequired<components["schemas"]["AbstractFieldValue"], "type">, "type"> & {
            /**
             * Format: int64
             * @description Duration value in milliseconds
             */
            value?: number;
        });
        EditComment: {
            /** @description Attachments of a comment */
            attachments?: string[];
            /** @description Text of a comment */
            comment: string;
            /**
             * @description Format of a comment
             * @default PlainText
             * @enum {string}
             */
            commentFormat: "PlainText" | "Html" | "Wiki";
        };
        /** @description Model for epoch time */
        EpochTime: {
            /** Format: int64 */
            epochTime?: number;
        };
        /** @description Request export for deployment */
        ExportForDeploymentRequest: {
            /** @description Name of the resulting export file (without extension). */
            exportFileName?: string;
            /** @description A password that is used during the project encryption. */
            password?: string;
            /** @description Project settings */
            projectSettings?: components["schemas"]["DeploymentProjectExportSettings"][];
            /** @description Name of deployment settings schema */
            readonly schemaName?: string;
            /** @description Version of deployment settings schema */
            readonly schemaVersion?: string;
        };
        ExportProject: {
            /**
             * @description A password that is used during the project encryption.
             * @example 007
             */
            password?: string;
            /** @description If this list is not empty then only the Trackers listed here are exported. */
            selectedTrackerIds?: number[];
            /**
             * @description If true, then the Associations are not exported
             * @default false
             */
            skipAssociations: boolean;
            /**
             * @description If true, then the Reports are not exported
             * @default false
             */
            skipReports: boolean;
            /**
             * @description If true, then the Tracker Items are not exported
             * @default false
             */
            skipTrackerItems: boolean;
            /**
             * @description If true, then the Wiki PAges are not exported
             * @default true
             */
            skipWikiPages: boolean;
        };
        /** @description Request model for exporting items to Word */
        ExportToWordRequest: {
            /** @description The children of the current item should be included also or not */
            currentItemAndItsChildren?: boolean;
            /**
             * Format: int32
             * @description The id of the item
             */
            currentItemId: number;
            /**
             * Format: int32
             * @description The Document tracker Folder where the exported file will be stored
             */
            exportTargetTrackerFolderId?: number;
            /**
             * Format: int32
             * @description The id of the Document type Tracker
             */
            exportTargetTrackerId: number;
            /** @description If true, new version of the file will be created (timestamp added), otherwise previous file will be overwritten */
            newVersion?: boolean;
            /**
             * Format: int32
             * @description If specified, the report result will be in the Word document instead of the current item (and its children, if this set)
             */
            reportId?: number;
            /** @description The name of the generated Word document */
            wordFilename: string;
            /** @description Which Word template should be used for the Word document generation */
            wordTemplateName?: string;
        };
        /** @description Basic properties required for codebeamer external scm repository item */
        ExternalScmRepositoryRequest: {
            /**
             * Format: int32
             * @description Id of already created token for external SCM provider API. Required in case when old access token should be used
             */
            accessTokenId?: number;
            /** @description Name of new access token for external SCM provider API. Required in case when new access token item should be created */
            accessTokenName?: string;
            /** @description Value of new access token for external SCM provider API. Required in case when new access token item should be created */
            accessTokenValue?: string;
            /** @description Enable or disable patch synchronization */
            enablePatchSynchronization: boolean;
            /** @description Name of new CB external SCM repository */
            name: string;
            /** @description Owner name or organization name of external SCM provider repository */
            ownerName: string;
            /** @description Project name of external SCM provider repository */
            projectName?: string;
            /** @description Base API URL of external SCM provider */
            remoteApiUrl: string;
            /** @description Repository name on external SCM provider's side */
            repositoryName: string;
            /** @description External SCM provider */
            scmType: string;
            /**
             * Format: int32
             * @description Id of already created Secret for external SCM provider API
             */
            secretId?: number;
        };
        /** @description Holds the details of a failed operation */
        FailedOperation: {
            /** @description Exception message */
            exceptionMessage?: string;
            /**
             * Format: int32
             * @description Entity id
             */
            id?: number;
        };
        /** @description groupsModels of a fieldLayoutSettingsModel */
        FieldLayoutGroups: {
            /** @description collapsed of a groupsModel */
            collapsed?: boolean;
            /** @description color of a groupsModel */
            color?: string;
            /** @description default of a groupsModel */
            default?: boolean;
            /** @description fieldModel of a groupsModel */
            fields?: components["schemas"]["LayoutField"][];
            /** @description name of a groupsModel */
            name?: string;
        };
        /** @description fieldLayoutSettingsModels of a tracker */
        FieldLayoutSettings: {
            /** @description groupsModels of a fieldLayoutSettingsModel */
            groups?: components["schemas"]["FieldLayoutGroups"][];
            /** @description name of a fieldLayoutSettingsModel */
            name?: string;
            /** @description showDefault of a fieldLayoutSettingsModel */
            showDefault?: boolean;
        };
        /** @description Reference to a field of a specific tracker */
        FieldReference: {
            type: "FieldReference";
        } & (Omit<components["schemas"]["AbstractReference"], "type"> & {
            /** @description The names of a shared fields assigned to the field. */
            readonly sharedFieldNames?: string[];
            /**
             * Format: int32
             * @description Id of the tracker
             * @example 1000
             */
            trackerId?: number;
        });
        /** @description Association pointing to an item */
        IncomingTrackerItemAssociation: {
            type: "IncomingTrackerItemAssociation";
        } & Omit<components["schemas"]["AbstractTrackerItemReference"], "type">;
        /** @description Integer field */
        IntegerField: {
            type: "IntegerField";
        } & (Omit<components["schemas"]["AbstractField"], "type"> & {
            /**
             * Format: int32
             * @description Maximum value of a field
             */
            max?: number;
            /**
             * Format: int32
             * @description Minimum value of a field
             */
            min?: number;
        });
        /** @description Value container of an integer field */
        IntegerFieldValue: {
            type: "IntegerFieldValue";
        } & (Omit<WithRequired<components["schemas"]["AbstractFieldValue"], "type">, "type"> & {
            /**
             * Format: int32
             * @description Integer value
             */
            value?: number;
        });
        InternalServerErrorException: {
            message?: string;
            resourceUri?: string;
        };
        InvalidParametersException: {
            message?: string;
            resourceUri?: string;
        };
        /** @description Reference to a background job */
        JobReference: {
            /**
             * Format: int32
             * @description Id of the job
             */
            jobId: number;
            /** @description Type of the job */
            jobType: string;
        };
        JsonView: {
            contentType?: string;
            json?: string;
            jsonObject?: components["schemas"]["JsonView"];
        };
        /** @description Label that is used for entities like tags. */
        Label: {
            /**
             * Format: date-time
             * @description The date when the entity was created
             */
            createdAt?: string;
            createdBy?: components["schemas"]["UserReference"];
            /** @description Whether the label is hidden or not */
            hidden?: boolean;
            /**
             * Format: int32
             * @description Id of the entity
             */
            id?: number;
            /** @description Name of the entity */
            name?: string;
            /** @description Whether the label is private or not */
            privateLabel?: boolean;
        };
        /** @description Language field */
        LanguageField: {
            type: "LanguageField";
        } & (Omit<components["schemas"]["AbstractField"], "type"> & {
            availableOptions?: string[];
            /** @description Multiple values state of a field */
            multipleValues?: boolean;
        });
        /** @description This model holds language field values. */
        LanguageFieldMultiValue: {
            type: "LanguageFieldMultiValue";
        } & (Omit<WithRequired<components["schemas"]["AbstractFieldValue"], "type">, "type"> & {
            /** @description Is field applicable for multiple select. */
            multipleSelection?: boolean;
            /** @description Language codes */
            values?: string[];
        });
        /** @description Value container of a language field */
        LanguageFieldValue: {
            type: "LanguageFieldValue";
        } & (Omit<WithRequired<components["schemas"]["AbstractFieldValue"], "type">, "type"> & {
            /** @description Language codes */
            values?: string[];
        });
        /** @description fieldModel of a groupsModel */
        LayoutField: {
            /** @description field of a fieldModel */
            field?: string;
            /**
             * Format: int32
             * @description fieldId of a fieldModel
             */
            fieldId?: number;
            /** @description width of a fieldModel */
            width?: string;
        };
        /** @description Information about an artifact lock */
        LockInfo: {
            /** @description Whether the lock will expire on its own, e.g. if it is a soft lock */
            expires?: boolean;
            user?: components["schemas"]["UserReference"];
        };
        /** @description Requested lock configuration */
        LockRequest: {
            /**
             * @description If not a hard lock, the duration specified in time notation
             * @example 1:30h
             */
            duration?: string;
            /** @description Whether the lock should be hard */
            hard?: boolean;
        };
        /** @description Basic properties of maintenance mode */
        MaintenanceMode: {
            properties?: components["schemas"]["MaintenanceModeProperties"];
            /**
             * @description System mode
             * @enum {string}
             */
            systemMode?: "NORMAL" | "MAINTENANCE";
        };
        /** @description Extra properties for maintenance mode */
        MaintenanceModeProperties: {
            /** @description Error text shown during login */
            loginErrorText: string;
            /** @description Text shown on login screen */
            loginText: string;
            /** @description Notification text */
            notificationText: string;
            /** @description Slogan text */
            slogan: string;
            /** @description Welcome text */
            welcomeText: string;
        } | null;
        /** @description Member field */
        MemberField: {
            type: "MemberField";
        } & (Omit<components["schemas"]["AbstractField"], "type"> & {
            /** @description Supported member type of member field */
            memberTypes?: ("USER" | "ROLE" | "GROUP")[];
            /** @description Multiple values state of a field */
            multipleValues?: boolean;
        });
        /** @description Paginated search result of members */
        MemberReferenceSearchResult: {
            /** @description Found members */
            members?: components["schemas"]["AbstractReference"][];
            /**
             * Format: int32
             * @description Index of the page
             */
            page?: number;
            /**
             * Format: int32
             * @description Size of the found page
             */
            pageSize?: number;
            /**
             * Format: int32
             * @description Number of matched tracker items by the search criteria
             */
            total?: number;
        };
        NotImplementedException: {
            message?: string;
            resourceUri?: string;
        };
        /** @description Not supported field value */
        NotSupportedFieldValue: {
            type: "NotSupportedFieldValue";
        } & Omit<WithRequired<components["schemas"]["AbstractFieldValue"], "type">, "type">;
        /** @description Option type choice field */
        OptionChoiceField: {
            type: "OptionChoiceField";
        } & (Omit<components["schemas"]["AbstractField"], "type"> & {
            /** @description Multiple values state of a field */
            multipleValues?: boolean;
            /** @description Available options of a choice field */
            options?: components["schemas"]["ChoiceOptionReference"][];
            /** @description Type of the contained references */
            referenceType?: string;
        });
        /** @description Association to another item */
        OutgoingTrackerItemAssociation: {
            type: "OutgoingTrackerItemAssociation";
        } & Omit<components["schemas"]["AbstractTrackerItemReference"], "type">;
        /** @description Represents the index of an item on a specific outline level. */
        OutlineIndex: {
            /**
             * Format: int32
             * @description Outline index
             * @example 1
             */
            index?: number;
            /**
             * Format: int32
             * @description Outline level
             * @example 0
             */
            level?: number;
        };
        /** @description Represents an outline item. */
        OutlineItem: {
            type: "OutlineItem";
        } & (Omit<components["schemas"]["AbstractOutline"], "type"> & {
            /** @description Indicator if the item has child items. */
            hasChildren?: boolean;
            itemReference?: components["schemas"]["TrackerItemReference"];
        });
        /** @description Paginated search result of outline items */
        OutlineItemSearchResult: {
            /** @description Found outline items */
            outlineItems?: components["schemas"]["OutlineItem"][];
            /**
             * Format: int32
             * @description Index of the page
             */
            page?: number;
            /**
             * Format: int32
             * @description Size of the found page
             */
            pageSize?: number;
            /**
             * Format: int32
             * @description Number of matched tracker items by the search criteria
             */
            total?: number;
        };
        /** @description A model created for wiki page outline models */
        OutlineWiki: {
            type: "OutlineWiki";
        } & (Omit<components["schemas"]["AbstractOutline"], "type"> & {
            wikiPageReferenceModel?: components["schemas"]["WikiPageReference"];
        });
        /** @description Paginated response model to get audit permission entries */
        PaginatedAuditPermissionsResponse: {
            /** @description Audit permission entries */
            auditPermissions?: components["schemas"]["AuditPermissions"][];
            /** @description Next page link */
            nextLink?: string;
            /**
             * Format: int32
             * @description Index of the page
             */
            page?: number;
            /**
             * Format: int32
             * @description Size of the found page
             */
            pageSize?: number;
            /** @description Previous page link */
            previousLink?: string;
            /**
             * Format: int32
             * @description Number of matched tracker items by the search criteria
             */
            total?: number;
        };
        /** @description Describes a Per Status field permission. */
        PerStatusFieldPermission: Omit<components["schemas"]["BaseTrackerFieldPermission"], "type"> & {
            accessPermissionsPerStatusMap?: {
                [key: string]: components["schemas"]["TrackerFieldPermission.AccessPermission"][];
            };
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "PER_STATUS";
        };
        /** @description Request model for multiple items. */
        PermissionIdsRequest: {
            /** @description Permission references. */
            permissions?: components["schemas"]["TrackerPermissionReference"][];
        };
        PostComment: {
            /** @description Attachments of a comment */
            attachments?: string[];
            /** @description Text of a comment */
            comment: string;
            /**
             * @description Format of a comment
             * @default PlainText
             * @enum {string}
             */
            commentFormat: "PlainText" | "Html" | "Wiki";
        };
        /** @description Basic properties of a codebeamer project */
        Project: {
            /** @description Category of a project */
            category?: string;
            /** @description Closed status of a project */
            closed?: boolean;
            /**
             * Format: date-time
             * @description The date when the entity was created
             */
            createdAt?: string;
            createdBy?: components["schemas"]["UserReference"];
            /** @description Delete status of a project */
            deleted?: boolean;
            /** @description Description of the entity */
            description?: string;
            /**
             * @description Description format of the entity
             * @enum {string}
             */
            descriptionFormat?: "PlainText" | "Html" | "Wiki";
            /**
             * Format: int32
             * @description Id of the entity
             */
            id?: number;
            /** @description Key name of a project */
            keyName?: string;
            /**
             * Format: date-time
             * @description The date when the entity was modified
             */
            modifiedAt?: string;
            modifiedBy?: components["schemas"]["UserReference"];
            /** @description Name of the entity */
            name?: string;
            /** @description Template status of a project */
            template?: boolean;
            /**
             * Format: int32
             * @description Version of a project
             */
            version?: number;
        };
        /** @description Reference to a project baseline */
        ProjectBaselineReference: {
            type: "ProjectBaselineReference";
        } & Omit<components["schemas"]["AbstractReference"], "type">;
        /** @description Project item type choice field */
        ProjectChoiceField: {
            type: "ProjectChoiceField";
        } & (Omit<components["schemas"]["AbstractField"], "type"> & {
            /** @description Multiple values state of a field */
            multipleValues?: boolean;
            /** @description Type of the contained references */
            referenceType?: string;
        });
        ProjectFilteringRequest: {
            /** @description Key name of the project */
            keyName: string;
        };
        /** @description Project member permissions */
        ProjectMemberPermissions: {
            /** @description Role references */
            roles?: components["schemas"]["RoleReference"][] | null;
        };
        /** @description Reference to a project */
        ProjectReference: {
            type: "ProjectReference";
        } & Omit<components["schemas"]["AbstractReference"], "type">;
        /** @description Reference to a project role */
        ProjectRoleReference: {
            type: "ProjectRoleReference";
        } & Omit<components["schemas"]["AbstractReference"], "type">;
        /** @description One page of artifact revisions. */
        ProjectSearchResult: {
            /**
             * Format: int32
             * @description Index of the page
             */
            page?: number;
            /**
             * Format: int32
             * @description Size of the found page
             */
            pageSize?: number;
            /** @description Found projects */
            projects?: components["schemas"]["Project"][];
            /**
             * Format: int32
             * @description Number of matched tracker items by the search criteria
             */
            total?: number;
        };
        /** @description Reference to a project with the contained trackerType ids */
        ProjectWithTrackerTypesReference: {
            type: "ProjectWithTrackerTypesReference";
        } & (Omit<components["schemas"]["AbstractReference"], "type"> & {
            trackerTypeIds?: number[];
        });
        /** @description Administrative reference field */
        ReferenceField: {
            type: "ReferenceField";
        } & Omit<components["schemas"]["AbstractField"], "type">;
        /** @description Describes a Choice Option Field's Reference Filter. */
        "ReferenceFilterBasedChoice.ReferenceFilter": {
            /** Format: int32 */
            domainId?: number;
            /** @enum {string} */
            domainType?: "TRACKER" | "PROJECT";
            /** Format: int32 */
            filterId?: number;
            /** Format: int32 */
            filterStatusId?: number;
            /** Format: int32 */
            id?: number;
            targetIds?: number[];
            targetPermissions?: string[];
        };
        /** @description One page of references. */
        ReferenceSearchResult: {
            /**
             * Format: int32
             * @description Index of the page
             */
            page?: number;
            /**
             * Format: int32
             * @description Size of the found page
             */
            pageSize?: number;
            /** @description Found references */
            references?: components["schemas"]["AbstractReference"][];
            /**
             * Format: int32
             * @description Number of matched tracker items by the search criteria
             */
            total?: number;
        };
        /** @description Value container of a referred test step */
        ReferredTestStepFieldValue: {
            type: "ReferredTestStepFieldValue";
        } & (Omit<WithRequired<components["schemas"]["AbstractFieldValue"], "type">, "type"> & {
            /** @description Id of the referred test step */
            referredStepId: string;
            /**
             * Format: int32
             * @description Id of the test case where the referred test step comes
             */
            referredTestCaseId: number;
            /** @description Id of the Test Step */
            value?: string;
        });
        /** @description A file to migrate from a remote directory. */
        RemoteMigrationFile: {
            /**
             * @description File name of the newly created attachment.
             * @example newFile.txt
             */
            fileName?: string;
            /**
             * @description The path of the file relative to the configured migration home directory.
             * @example folder/file.txt
             */
            filePath?: string;
            /**
             * @description Precomputed MD5 checksum of the file.
             * @example f6967f92c24a8f3c4849d30c9f17e321
             */
            md5sum?: string;
            /**
             * @description Precomputed SHA512 checksum of the file.
             * @example 2e74ed4b0741e1fbe22d61e165c7c0dc4383a1aa5aa708291e32fff4cb189b9a5dfea7ffca2a22dcca258751cf4ad947c1c34abdf3fa2994219be394fbe40370
             */
            sha512sum?: string;
        };
        /** @description Aggregated values for a column of a group. */
        ReportAggregate: {
            /**
             * Format: double
             * @description Average of the column values
             * @example 11.32
             */
            average?: number;
            /**
             * @description Column reference
             * @example 11-1
             */
            columnRef?: string;
            /**
             * Format: double
             * @description Average of the column values
             * @example 21.32
             */
            maximum?: number;
            /**
             * Format: double
             * @description Minimum of the column values
             * @example 1.32
             */
            minimum?: number;
            /**
             * Format: double
             * @description Sum of the column values
             * @example 22.64
             */
            sum?: number;
        };
        /** @description Cell value for a column. */
        ReportCell: {
            /** @description Column reference */
            columnRef?: string;
            /**
             * @description Cell value
             * @example 12.32
             */
            value?: Record<string, never>;
        };
        /** @description Column definition for a report */
        ReportColumn: {
            /**
             * Format: int32
             * @description Column position index in the report.
             * @example 0
             */
            columnIndex?: number;
            /**
             * @description Column reference
             * @example 12-1
             */
            columnRef?: string;
            /**
             * Format: double
             * @description Column width in percentage
             * @example 16.533667
             */
            columnWidthPercentage?: number;
            field?: components["schemas"]["FieldReference"];
            /**
             * @description Column name
             * @example Status
             */
            name?: string;
            /**
             * @description Column type
             * @example choice
             */
            type?: string;
        };
        /** @description Settings for a column definition. */
        ReportColumnSettings: {
            /**
             * Format: int32
             * @description Index of the column in the report table.
             * @example 0
             */
            columnIndex: number;
            field: components["schemas"]["FieldReference"];
        };
        /** @description A report group which can contain rows or other groups based on the type. */
        ReportGroup: {
            /** @description List of the aggregate values with column id. */
            aggregates?: components["schemas"]["ReportAggregate"][];
            /**
             * Format: double
             * @description Number of items in the group, if it has subgroups then the aggregated number of items.
             * @example 32
             */
            count?: number;
            /**
             * @description The common value in the group, if it's available
             * @example In progress
             */
            groupingValue?: string;
            /**
             * Format: int32
             * @description The id of the common value in the group, if it's available
             * @example 2
             */
            groupingValueId?: number;
            /**
             * @description Grouping header
             * @example Status: In progress
             */
            header?: string;
            /**
             * @description Type of the group.
             * @example row
             */
            type?: string;
        };
        /** @description ReportGroup having subgroups. */
        ReportGroupWithGroups: {
            type: "ReportGroupWithGroups";
        } & (Omit<components["schemas"]["ReportGroup"], "type"> & {
            /** @description Subgroups in the group. */
            groups?: components["schemas"]["ReportGroup"][];
        });
        /** @description ReportGroup having rows with references. */
        ReportGroupWithReferencedRows: {
            type: "ReportGroupWithReferencedRows";
        } & (Omit<components["schemas"]["ReportGroup"], "type"> & {
            /** Format: int32 */
            groupingLevel?: number;
            rows?: components["schemas"]["ReportReferencedRow"][];
            /** Format: int32 */
            starRow?: number;
        });
        /** @description ReportGroup having rows. */
        ReportGroupWithRows: {
            type: "ReportGroupWithRows";
        } & (Omit<components["schemas"]["ReportGroup"], "type"> & {
            rows?: components["schemas"]["ReportRow"][];
        });
        /** @description An item of the report. */
        ReportItem: {
            /** @description Indicator if the item is a real query result (e.g. not an ancestor item). */
            isRealResult?: boolean;
            item?: components["schemas"]["TrackerItem"];
            /**
             * Format: int32
             * @description Item's level in the tracker outline.
             */
            outlineLevel?: number;
        };
        /** @description Reference data of an underlying item of a row. */
        ReportItemReference: {
            /**
             * Format: int32
             * @description Identifier of the underlying item.
             */
            itemId?: number;
            /**
             * Format: int32
             * @description Identifier of the tracker of the underlying item.
             */
            trackerId?: number;
        };
        ReportItemResult: {
            /** @description Found tracker items */
            items?: components["schemas"]["ReportItem"][];
            /**
             * Format: int32
             * @description Index of the page
             */
            page?: number;
            /**
             * Format: int32
             * @description Size of the found page
             */
            pageSize?: number;
            /**
             * Format: int32
             * @description Number of matched tracker items by the search criteria
             */
            total?: number;
        };
        /** @description Paging information of the current result. */
        ReportPagingInformation: {
            /**
             * Format: int32
             * @description Index of the page
             */
            page?: number;
            /**
             * Format: int32
             * @description Number of pages in the report
             */
            pageCount?: number;
            /**
             * Format: int32
             * @description Size of the found page
             */
            pageSize?: number;
        };
        /** @description Access permissions for the report. */
        ReportPermission: {
            /**
             * @description Access level
             * @example READ
             * @enum {string}
             */
            access: "NONE" | "READ" | "WRITE" | "READ_WRITE";
            project: components["schemas"]["ProjectReference"];
            role: components["schemas"]["RoleReference"];
        };
        /** @description Reference to a report */
        ReportReference: {
            type: "ReportReference";
        } & Omit<components["schemas"]["AbstractReference"], "type">;
        /** @description Reference results for an item. */
        ReportReferenceLevel: {
            /** @description Columns to show on this reference level. */
            columns?: components["schemas"]["ReportColumn"][];
            /** @description Downstream reference results. */
            downstreamReferenceRows?: components["schemas"]["ReportReferencedRow"][];
            /**
             * Format: int32
             * @description Reference level.
             * @example 1
             */
            referenceLevel?: number;
            /** @description Upstream reference results. */
            upstreamReferenceRows?: components["schemas"]["ReportReferencedRow"][];
        };
        /** @description Reference level settings for Intelligent Table View. */
        ReportReferenceLevelSettings: {
            /** @description Columns to show on this reference level. */
            columns: components["schemas"]["ReportColumnSettings"][];
            /**
             * @description Include downstream references indicator.
             * @example false
             */
            downstreamReference: boolean;
            /**
             * Format: int32
             * @description Level of the reference layer
             * @example 1
             */
            level: number;
            /** @description Tracker types to include on this level. */
            referenceTrackerTypes?: components["schemas"]["TrackerTypeReference"][];
            /** @description Trackers to include on this level. */
            referenceTrackers?: components["schemas"]["TrackerReference"][];
            /**
             * @description Include upstream references indicator.
             * @example true
             */
            upstreamReference: boolean;
        };
        /** @description Result row having references. */
        ReportReferencedRow: components["schemas"]["ReportRow"] & {
            /** @description Cells in a row. */
            cells?: components["schemas"]["ReportCell"][];
            /** @description Indicator if the item is a real query result (e.g. not an ancestor item). */
            isRealResult?: boolean;
            itemRef?: components["schemas"]["ReportItemReference"];
            /**
             * Format: int32
             * @description Item's level in the tracker outline.
             */
            outlineLevel?: number;
            references?: components["schemas"]["ReportReferenceLevel"];
        };
        /** @description Report data model */
        ReportResult: {
            /**
             * @description CbQL query behind the report
             * @example project.id IN (2) AND tracker.id IN (21323) ORDER BY priority ASC
             */
            cbQL?: string;
            /** @description Column information */
            columns?: components["schemas"]["ReportColumn"][];
            data?: components["schemas"]["ReportGroup"];
            pagingInformation?: components["schemas"]["ReportPagingInformation"];
            report?: components["schemas"]["ReportReference"];
            /** @description Indicator to ability to collapse/expand all child items. */
            showAllChildren?: boolean;
        };
        /** @description A row of the report containing cell information. */
        ReportRow: {
            /** @description Cells in a row. */
            cells?: components["schemas"]["ReportCell"][];
            /** @description Indicator if the item is a real query result (e.g. not an ancestor item). */
            isRealResult?: boolean;
            itemRef?: components["schemas"]["ReportItemReference"];
            /**
             * Format: int32
             * @description Item's level in the tracker outline.
             */
            outlineLevel?: number;
        };
        /** @description Repository type choice field */
        RepositoryChoiceField: {
            type: "RepositoryChoiceField";
        } & (Omit<components["schemas"]["AbstractField"], "type"> & {
            /** @description Multiple values state of a field */
            multipleValues?: boolean;
            /** @description Type of the contained references */
            referenceType?: string;
        });
        /** @description Reference to a Repository */
        RepositoryReference: {
            type: "RepositoryReference";
        } & Omit<components["schemas"]["AbstractReference"], "type">;
        /** @description Settings for a resizeable column definition. */
        ResizableReportColumnSettings: {
            /**
             * Format: int32
             * @description Index of the column in the report table.
             * @example 0
             */
            columnIndex: number;
            /**
             * Format: double
             * @description Width of the column in percentage.
             * @example 43.2
             */
            columnWidthPercentage?: number;
            field: components["schemas"]["FieldReference"];
        };
        ResourceForbiddenException: {
            message?: string;
            resourceUri?: string;
        };
        ResourceLockedException: {
            message?: string;
            resourceUri?: string;
        };
        ResourceNotFoundException: {
            message?: string;
            resourceUri?: string;
        };
        ResourceUnauthorizedException: {
            message?: string;
            resourceUri?: string;
        };
        RestException: {
            message?: string;
            resourceUri?: string;
        };
        /** @description Project role reference field */
        ReviewMemberReferenceField: {
            type: "ReviewMemberReferenceField";
        } & Omit<components["schemas"]["AbstractField"], "type">;
        Role: {
            /** @description Description of a role */
            description?: string;
            /**
             * @description Format of a role's description
             * @enum {string}
             */
            descriptionFormat?: "PlainText" | "Html" | "Wiki";
            /**
             * Format: int32
             * @description Id of the entity
             */
            id?: number;
            /** @description Name of the entity */
            name?: string;
            /** @description Reference type of the role */
            type?: string;
        };
        /** @description Reference to a role */
        RoleReference: {
            type: "RoleReference";
        } & Omit<components["schemas"]["AbstractReference"], "type">;
        /** @description Model that contains permissions connected to roles */
        RoleWithPermissions: {
            role?: components["schemas"]["RoleReference"];
            /** @description Permission for the role */
            trackerPermissions?: components["schemas"]["TrackerPermissionReference"][];
        };
        /** @description Describes a Same As field permission. */
        SameAsFieldPermission: Omit<components["schemas"]["BaseTrackerFieldPermission"], "type"> & {
            /** Format: int32 */
            sameAsId?: number;
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "SAME_AS";
        };
        /** @description Reference to a shared field */
        SharedFieldReference: {
            type: "SharedFieldReference";
        } & Omit<components["schemas"]["AbstractReference"], "type">;
        /** @description Settings for a simple report. */
        SimpleReportSettings: {
            /** @description Access permissions for the report. */
            addedPermissions?: components["schemas"]["ReportPermission"][];
            /**
             * @description CbQL query string of the report.
             * @example priority='Normal'
             */
            cbQl: string;
            /** @description Column definitions. */
            columns: components["schemas"]["ResizableReportColumnSettings"][];
            /**
             * @description Description of the report.
             * @example Normal priority items.
             */
            description: string;
            /**
             * @description Name of the report.
             * @example My first query
             */
            name: string;
            /**
             * Format: int32
             * @description Id of a report
             * @example 1
             */
            reportId?: number;
            /**
             * @description Indicator to ability to collapse/expand all child items.
             * @example false
             */
            showAllChildren?: boolean;
            /**
             * @description Indicator to show the ancestors of a result item.
             * @example true
             */
            showAncestors?: boolean;
            /**
             * @description Indicator to show the descendants of a result item.
             * @example false
             */
            showDescendants?: boolean;
        };
        /** @description Describes a Single field permission. */
        SingleFieldPermission: Omit<components["schemas"]["BaseTrackerFieldPermission"], "type"> & {
            accessPermissions?: components["schemas"]["TrackerFieldPermission.AccessPermission"][];
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "SINGLE";
        };
        /** @description statusLayout of a tracker */
        StatusLayout: {
            /** @description layout of a statusLayout */
            layout?: string;
            /** @description status of a statusLayout */
            status?: string;
        };
        /** @description Basic properties of system status */
        SystemStatus: {
            /**
             * @description System mode
             * @enum {string}
             */
            systemMode?: "NORMAL" | "MAINTENANCE";
        };
        /** @description Table field */
        TableField: {
            type: "TableField";
        } & (Omit<components["schemas"]["AbstractField"], "type"> & {
            /** @description Columns of a table */
            columns?: components["schemas"]["AbstractField"][];
        });
        /** @description Value container of a table field */
        TableFieldValue: {
            type: "TableFieldValue";
        } & (Omit<WithRequired<components["schemas"]["AbstractFieldValue"], "type">, "type"> & {
            /** @description Table values */
            values?: components["schemas"]["AbstractFieldValue"][][];
        });
        /** @description Multiple Test Runs */
        TestRunResult: {
            testRuns?: components["schemas"]["TrackerItem"][];
        };
        /** @description Text field */
        TextField: {
            type: "TextField";
        } & (Omit<components["schemas"]["AbstractField"], "type"> & {
            /**
             * Format: int32
             * @description Max length of value of a field
             */
            max?: number;
            /**
             * Format: int32
             * @description Minimum length of value of a field
             */
            min?: number;
        });
        /** @description Value container of a text field */
        TextFieldValue: {
            type: "TextFieldValue";
        } & (Omit<WithRequired<components["schemas"]["AbstractFieldValue"], "type">, "type"> & {
            /** @description Text value */
            value?: string;
        });
        TooManyRequestsException: {
            message?: string;
            resourceUri?: string;
            /** Format: int64 */
            retryAfterSecond?: number;
        };
        /** @description Settings to filter items */
        TraceabilityInitialLevelFilter: {
            /** @description cbQL */
            cbQL: string;
            /**
             * Format: int32
             * @description Snapshot view of given baseline
             */
            historyBaselineId?: number;
            /**
             * Format: date-time
             * @description Snapshot view of given date
             */
            historyDate?: string;
            /**
             * @description Show ancestor items
             * @default false
             */
            showAncestorItems: boolean;
            /**
             * @description Show descendant items
             * @default false
             */
            showDescendantItems: boolean;
        };
        /** @description Traceability Item */
        TraceabilityItem: {
            /** @description children */
            children?: components["schemas"]["TraceabilityItem"][];
            "incoming association"?: components["schemas"]["TrackerItemRevision"][];
            "incoming reference"?: components["schemas"]["TrackerItemRevision"][];
            /** @description incoming associations */
            incomingAssociations?: components["schemas"]["TrackerItemRevision"][];
            /** @description incoming references */
            incomingReferences?: components["schemas"]["TrackerItemRevision"][];
            itemRevision?: components["schemas"]["TrackerItemRevision"];
            "outgoing association"?: components["schemas"]["TrackerItemRevision"][];
            "outgoing reference"?: components["schemas"]["TrackerItemRevision"][];
            /** @description outgoing association */
            outgoingAssociations?: components["schemas"]["TrackerItemRevision"][];
            /** @description outgoing reference */
            outgoingReferences?: components["schemas"]["TrackerItemRevision"][];
        };
        /** @description Traceability level filter */
        TraceabilityLevelFilter: {
            /** @description cbQL */
            cbQL: string;
            /**
             * @description Show folders and information
             * @default false
             */
            foldersAndInformation: boolean;
            /**
             * Format: int32
             * @description History Baseline Id - Snapshot view of the given baseline
             */
            historyBaselineId?: number;
            /**
             * Format: date-time
             * @description History Date - Snapshot view of the given date
             */
            historyDate?: string;
            /**
             * @description Show incoming association
             * @default true
             */
            incomingAssociation: boolean;
            /**
             * @description Show incoming references
             * @default true
             */
            incomingReference: boolean;
            /**
             * @description Show outgoing association
             * @default true
             */
            outgoingAssociation: boolean;
            /**
             * @description Show outgoing references
             * @default true
             */
            outgoingReference: boolean;
            /** @description Previous Level Items */
            previousLevelItems?: components["schemas"]["TrackerItemRevision"][];
            showTestStepReferences?: boolean;
        };
        /** @description Traceability result */
        TraceabilityResult: {
            /** @description limit warnings */
            limitWarnings?: string;
            /** @description traceability items */
            traceabilityItems?: components["schemas"]["TraceabilityItem"][];
        };
        /** @description Basic properties of a codebeamer tracker */
        Tracker: {
            /** @description Indicator if the tracker can be used as a template */
            availableAsTemplate?: boolean;
            /** @description Color of the tracker */
            color?: string;
            /**
             * Format: date-time
             * @description The date when the entity was created
             */
            createdAt?: string;
            createdBy?: components["schemas"]["UserReference"];
            /** @description Default Outline should show Ancestor Items or not */
            defaultShowAncestorItems: boolean;
            /** @description Default Outline should show Descendant Items or not */
            defaultShowDescendantItems: boolean;
            /** @description Indicator if the tracker is deleted */
            deleted: boolean;
            /** @description Description of the entity */
            description?: string;
            /**
             * @description Description format of the entity
             * @enum {string}
             */
            descriptionFormat?: "PlainText" | "Html" | "Wiki";
            /** @description Indicator if the tracker is hidden */
            hidden: boolean;
            /**
             * Format: int32
             * @description Id of the entity
             */
            id?: number;
            /** @description Keyname of a tracker */
            keyName?: string;
            /**
             * Format: date-time
             * @description The date when the entity was modified
             */
            modifiedAt?: string;
            modifiedBy?: components["schemas"]["UserReference"];
            /** @description Name of the entity */
            name?: string;
            /** @description If true, then the only way to create new referring items is through workflow actions */
            onlyWorkflowCanCreateNewReferringItem: boolean;
            project?: components["schemas"]["ProjectReference"];
            /** @description If the tracker is shared in a WorkingSet */
            sharedInWorkingSet?: boolean;
            templateTracker?: components["schemas"]["TrackerReference"];
            trackerFieldLayoutSettingsModel?: components["schemas"]["TrackerFieldLayoutSettings"];
            type?: components["schemas"]["TrackerTypeReference"];
            /** @description If true, then every transition will be executed immediately (if possible) without opening an editor for the item */
            usingQuickTransitions: boolean;
            /** @description Should transitions and workflow actions be available in the tracker or not */
            usingWorkflow: boolean;
            /**
             * Format: int32
             * @description Version of a tracker
             */
            version?: number;
        };
        /** @description Reference to a tracker baseline */
        TrackerBaselineReference: {
            type: "TrackerBaselineReference";
        } & Omit<components["schemas"]["AbstractReference"], "type">;
        /** @description General Tracker information. */
        TrackerBasicInformation: {
            alwaysUseQuickTransitions?: boolean;
            color?: string;
            /** @enum {string} */
            defaultLayout?: "TABLE" | "DOCUMENT" | "DOCUMENT_EDIT" | "CARDBOARD" | "DASHBOARD";
            description?: string;
            hidden?: boolean;
            /** Format: int32 */
            inboxId?: number;
            /** Format: int32 */
            issueTypeId?: number;
            itemCountVisibility?: boolean;
            key?: string;
            locked?: boolean;
            name?: string;
            onlyWorkflowActionsCanCreateNewReferringItems?: boolean;
            /** Format: int32 */
            projectId?: number;
            recentReferringTrackersMenu?: boolean;
            referenceVisibility?: boolean;
            sharedInWorkingSets?: boolean;
            showAncestorItems?: boolean;
            showDescendantItems?: boolean;
            template?: boolean;
            /** Format: int32 */
            templateId?: number;
            /** Format: int32 */
            trackerId?: number;
            workflowIsActive?: boolean;
        };
        /** @description Tracker type choice field */
        TrackerChoiceField: {
            type: "TrackerChoiceField";
        } & (Omit<components["schemas"]["AbstractField"], "type"> & {
            /** @description Multiple values state of a field */
            multipleValues?: boolean;
            /** @description Type of the contained references */
            referenceType?: string;
        });
        /** @description This model represents the whole Tracker configuration. */
        TrackerConfiguration: {
            basicInformation?: components["schemas"]["TrackerBasicInformation"];
            fields?: components["schemas"]["TrackerField"][];
        };
        /** @description This model represents a whole Tracker Field configuration. */
        TrackerField: {
            /**
             * @description The Aggregation Rule for a specific Field.
             * @enum {string}
             */
            aggregationRule?: "MINIMUM" | "MAXIMUM" | "UNION" | "INTERSECTION" | "SUM_TOTAL" | "AVERAGE";
            allowedValuesInStatuses?: {
                [key: string]: string;
            };
            bidirectionalSuspect?: boolean;
            choiceOptionSetting?: components["schemas"]["BaseTrackerFieldChoiceOption"];
            computedAs?: string;
            computedFieldReferences?: components["schemas"]["TrackerField.ComputedFieldReference"][];
            dateFieldSettings?: components["schemas"]["TrackerField.DateFieldSettings"];
            defaultValuesInStatuses?: {
                [key: string]: string;
            };
            dependency?: components["schemas"]["TrackerFieldDependency"];
            description?: string;
            /** Format: int32 */
            digits?: number;
            /**
             * @description The Distribution Rule of a specific Field.
             * @enum {string}
             */
            distributionRule?: "SET" | "DEFAULT" | "LEAST" | "GREATEST" | "SUBSET" | "SUPERSET" | "CLOSE_RECURSIVELY" | "CLOSE_RESTRICTED";
            globalTypeIds?: number[];
            /** Format: int32 */
            height?: number;
            hidden?: boolean;
            hideIfFormula?: string;
            /** Format: int32 */
            hideIfFormulaSameAsFieldId?: number;
            label?: string;
            listable?: boolean;
            mandatory?: boolean;
            mandatoryExceptInStatus?: number[];
            mandatoryIfFormula?: string;
            /** Format: int32 */
            mandatoryIfFormulaSameAsFieldId?: number;
            maxValue?: string;
            minValue?: string;
            multipleSelection?: boolean;
            newLine?: boolean;
            omitMerge?: boolean;
            omitSuspectedWhenChange?: boolean;
            permission?: components["schemas"]["BaseTrackerFieldPermission"];
            /** Format: int32 */
            position?: number;
            propagateDependencies?: boolean;
            propagateSuspect?: boolean;
            /** Format: int32 */
            referenceId?: number;
            reversedSuspect?: boolean;
            serviceDeskField?: components["schemas"]["TrackerField.ServiceDeskField"];
            /** Format: int32 */
            span?: number;
            title?: string;
            /** Format: int32 */
            typeId?: number;
            union?: boolean;
            /** Format: int32 */
            width?: number;
        };
        /** @description Describes the Computed Field Reference configuration. */
        "TrackerField.ComputedFieldReference": {
            /** @enum {string} */
            direction?: "UP" | "DOWN";
            /** Format: int32 */
            referredFieldId?: number;
            /** Format: int32 */
            referredFieldTrackerId?: number;
            /** Format: int32 */
            referredTrackerId?: number;
        };
        /** @description Describes the settings of a date type Field. */
        "TrackerField.DateFieldSettings": {
            displayDay?: boolean;
            displayMonth?: boolean;
            displayTime?: boolean;
            displayYear?: boolean;
        };
        /** @description Describes the Service Desk related configurations. */
        "TrackerField.ServiceDeskField": {
            description?: string;
            label?: string;
        };
        /** @description Describes a Field Dependency configuration. */
        TrackerFieldDependency: {
            /** Format: int32 */
            dependentFieldId?: number;
            valueCombinations?: {
                [key: string]: string;
            };
        };
        /** @description The field group layouts setting is used when rendering the edit view for a specific tracker item */
        TrackerFieldLayoutSettings: {
            /** @description defaultLayout of a tracker */
            defaultLayout?: string;
            /** @description fieldLayoutSettingsModels of a tracker */
            layouts?: components["schemas"]["FieldLayoutSettings"][];
            /** @description statusLayout of a tracker */
            statusLayout?: components["schemas"]["StatusLayout"][];
        };
        /** @description Describes an atomic permission. */
        "TrackerFieldPermission.AccessPermission": {
            /**
             * @description The level of the access.
             * @enum {string}
             */
            access?: "NONE" | "READ" | "READ_WRITE";
            /** Format: int32 */
            subjectId?: number;
            /**
             * @description The type of the subject of the permission.
             * @enum {string}
             */
            subjectType?: "FIELD" | "ROLE";
        };
        /** @description Tracker field permissions */
        TrackerFieldPermissions: {
            /** @description Permissions for the given field */
            fieldPermissions?: components["schemas"]["TrackerFieldStatusPermissions"][];
            fieldReference?: components["schemas"]["FieldReference"];
        };
        /** @description Field permissions by role for specific status */
        TrackerFieldStatusPermissions: {
            /** @description Access permissions by role */
            permissions?: components["schemas"]["AccessPermission"][];
            status?: components["schemas"]["ChoiceOptionReference"];
        };
        /** @description All field permissions by role for specific status */
        TrackerFieldsStatusPermissions: {
            /** @description Permissions */
            permissions?: components["schemas"]["TrackerFieldPermissions"][];
        };
        TrackerFilteringRequest: {
            /**
             * @description True to also show removed trackers.
             * @example false
             */
            deleted?: boolean;
            /**
             * @description True to also show hidden trackers.
             * @example false
             */
            hidden?: boolean;
            /** @description Filter by project key name */
            keyName?: string;
            /** @description List of tracker type references, to only show trackers of these types. */
            types?: components["schemas"]["TrackerTypeReference"][];
        };
        /** @description Basic properties of a codebeamer tracker item */
        TrackerItem: {
            /**
             * Format: int64
             * @description Accrued work time of a tracker item in milliseconds
             */
            readonly accruedMillis?: number;
            /** @description Angular icon for the tracker item */
            readonly angularIcon?: string;
            /** @description Areas of a tracker item */
            areas?: components["schemas"]["AbstractReference"][];
            /**
             * Format: date-time
             * @description Assignee date of a tracker item
             */
            readonly assignedAt?: string;
            /** @description Assignees of a tracker item */
            assignedTo?: components["schemas"]["AbstractReference"][];
            /** @description Categories of a tracker item */
            categories?: components["schemas"]["AbstractReference"][];
            /** @description Children of a tracker item */
            readonly children?: components["schemas"]["TrackerItemReference"][];
            /**
             * Format: date-time
             * @description Close date of a tracker item
             */
            closedAt?: string;
            /** @description Comment in the tracker item */
            readonly comments?: components["schemas"]["CommentReference"][];
            /**
             * Format: int32
             * @description Id shared by the branched versions of the tracker item
             */
            commonItemId?: number;
            /**
             * Format: date-time
             * @description The date when the entity was created
             */
            createdAt?: string;
            createdBy?: components["schemas"]["UserReference"];
            /** @description Custom field of a tracker item */
            customFields?: components["schemas"]["AbstractFieldValue"][];
            /** @description Description of the entity */
            description?: string;
            /**
             * @description Description format of the entity
             * @enum {string}
             */
            descriptionFormat?: "PlainText" | "Html" | "Wiki";
            /**
             * Format: date-time
             * @description End date of a tracker item
             */
            endDate?: string;
            /**
             * Format: int64
             * @description Estimated work time of a tracker item in milliseconds
             */
            estimatedMillis?: number;
            formality?: components["schemas"]["AbstractReference"];
            /** @description Color of the tracker item icon */
            readonly iconColor?: string;
            /** @description Url of the tracker item icon */
            readonly iconUrl?: string;
            /**
             * Format: int32
             * @description Id of the entity
             */
            id?: number;
            /**
             * Format: date-time
             * @description The date when the entity was modified
             */
            modifiedAt?: string;
            modifiedBy?: components["schemas"]["UserReference"];
            /** @description Name of the entity */
            name?: string;
            /**
             * Format: int32
             * @description Ordinal of a tracker item
             */
            ordinal?: number;
            /** @description Owners of a tracker item */
            owners?: components["schemas"]["AbstractReference"][];
            parent?: components["schemas"]["TrackerItemReference"];
            /** @description Platforms of a tracker item */
            platforms?: components["schemas"]["AbstractReference"][];
            priority?: components["schemas"]["AbstractReference"];
            releaseMethod?: components["schemas"]["AbstractReference"];
            /** @description Resolutions of a tracker item */
            resolutions?: components["schemas"]["AbstractReference"][];
            /** @description Severities of a tracker item */
            severities?: components["schemas"]["AbstractReference"][];
            /**
             * Format: int64
             * @description Spent work time of a tracker item in milliseconds
             */
            spentMillis?: number;
            /**
             * Format: date-time
             * @description Start date of a tracker item
             */
            startDate?: string;
            status?: components["schemas"]["AbstractReference"];
            /**
             * Format: int32
             * @description Story points of a tracker item
             */
            storyPoints?: number;
            /** @description Subjects of a tracker item */
            subjects?: components["schemas"]["AbstractReference"][];
            /** @description Tags of the tracker item */
            readonly tags?: components["schemas"]["Label"][];
            /** @description Teams of a tracker item */
            teams?: components["schemas"]["AbstractReference"][];
            tracker?: components["schemas"]["TrackerReference"];
            /** @description Type name of a tracker item */
            typeName?: string;
            /**
             * Format: int32
             * @description Version of a tracker item
             */
            readonly version?: number;
            /** @description Versions of a tracker item */
            versions?: components["schemas"]["AbstractReference"][];
        };
        /** @description Request data to retrieve tracker item attachments. */
        TrackerItemAttachmentRequest: {
            type: "TrackerItemAttachmentRequest";
        } & (Omit<components["schemas"]["TrackerItemsRequest"], "type"> & {
            /**
             * Format: int32
             * @description Baseline id to specify the versions of the tracker items.
             * @example 1203
             */
            baselineId?: number;
            /**
             * @description Indicator if the attachments matching the filters need to be excluded or not
             * @example false
             */
            excludeFilter?: boolean;
            /**
             * @description File extension filters.
             * @example [
             *       "docx",
             *       "xlsx"
             *     ]
             */
            extensions?: string[];
            /**
             * @description File mime type filters.
             * @example [
             *       "image/png",
             *       "application/zip"
             *     ]
             */
            mimeTypes?: string[];
        });
        /** @description Update of an item's field */
        TrackerItemChange: {
            type: "TrackerItemChange";
        } & Omit<components["schemas"]["AbstractTrackerItemChange"], "type">;
        /** @description Reference to a child item in the tracker outline. */
        TrackerItemChildReference: {
            /**
             * Format: int32
             * @description Ordinal in the tracker outline.
             * @example 0
             */
            index: number;
            itemReference: components["schemas"]["TrackerItemReference"];
        };
        /** @description Tracker item type choice field */
        TrackerItemChoiceField: {
            type: "TrackerItemChoiceField";
        } & (Omit<components["schemas"]["AbstractField"], "type"> & {
            /** @description Multiple values state of a field */
            multipleValues?: boolean;
            /** @description Type of the contained references */
            referenceType?: string;
        });
        TrackerItemField: {
            /** @description Fields which can be modified */
            editableFields?: components["schemas"]["AbstractFieldValue"][];
            /** @description Table fields which can be modified */
            editableTableFields?: components["schemas"]["TableFieldValue"][];
            /** @description Fields which are not writable in the current state */
            readOnlyFields?: components["schemas"]["AbstractFieldValue"][];
            /** @description Table fields which are not writable in the current state */
            readOnlyTableFields?: components["schemas"]["TableFieldValue"][];
        };
        /** @description Accessibilities of fields */
        TrackerItemFieldAccessibility: {
            /** @description Field is editable */
            editable?: boolean;
            field?: components["schemas"]["FieldReference"];
            /** @description Field is mandatory */
            mandatory?: boolean;
            /** @description Field is visible */
            visible?: boolean;
        };
        TrackerItemFieldAccessibilityList: {
            /** @description Accessibilities of fields */
            fields?: components["schemas"]["TrackerItemFieldAccessibility"][];
        };
        /** @description Information of Tracker field */
        TrackerItemFieldMapping: {
            /**
             * Format: int32
             * @description Id of the entity
             */
            id?: number;
            /** @description Name of the entity */
            name?: string;
            /** @description Tracker field property name */
            property?: string;
            /** @description Tracker field type */
            typeName?: string;
        };
        /** @description Tracker field mapping information. */
        TrackerItemFieldMappingInfo: {
            /** @description No mappable field exists, these fields will be lost */
            lostMapping?: components["schemas"]["TrackerItemFieldMapping"][];
            /** @description Direct mappable fields */
            mapping?: components["schemas"]["TrackerItemFieldMappingPair"][];
            /** @description Not direct mappable fields, but possible mapping exist */
            possibleMapping?: components["schemas"]["TrackerItemFieldMappingPossiblePair"][];
        };
        /** @description Tracker field mapping pair */
        TrackerItemFieldMappingPair: {
            sourceField: components["schemas"]["TrackerItemFieldMapping"];
            targetField?: components["schemas"]["TrackerItemFieldMapping"];
        };
        /** @description Possible Tracker field mapping pair */
        TrackerItemFieldMappingPossiblePair: {
            /** @description Possible Target Tracker field information */
            possibleTargetFields?: components["schemas"]["TrackerItemFieldMapping"][];
            sourceField?: components["schemas"]["TrackerItemFieldMapping"];
        };
        /** @description Tracker item history containing all versions of an item. */
        TrackerItemHistory: {
            /** @description List of version changes. */
            versions?: components["schemas"]["TrackerItemHistoryRevision"][];
        };
        /** @description Revision history entry. */
        TrackerItemHistoryRevision: {
            /** @description Changes happened between the previous and current revision. */
            changes?: components["schemas"]["AbstractTrackerItemChange"][];
            itemRevision?: components["schemas"]["TrackerItemRevision"];
            /**
             * Format: date-time
             * @description The date when the entity was modified
             */
            modifiedAt?: string;
            modifiedBy?: components["schemas"]["UserReference"];
        };
        /** @description Request for Tracker Items move. */
        TrackerItemMoveRequest: {
            /** @description Field mappings between the Source Tacker and the Target Tracker. */
            fieldMapping: components["schemas"]["TrackerItemFieldMappingPair"][];
            /** @description Optional Tracker Item list. If not provided all Tracker Items from the Source Tracker are moved. */
            items?: components["schemas"]["TrackerItemReference"][];
            sourceTracker: components["schemas"]["TrackerReference"];
            targetTracker: components["schemas"]["TrackerReference"];
        };
        /** @description Reference to a tracker item */
        TrackerItemReference: {
            type: "TrackerItemReference";
        } & (Omit<components["schemas"]["AbstractReference"], "type"> & {
            angularIcon?: string;
            /** Format: int32 */
            commonItemId?: number;
            iconColor?: string;
            propagateSuspects?: boolean;
            referenceData?: components["schemas"]["TrackerItemReferenceData"];
            testStepReuse?: boolean;
            trackerKey?: string;
            /** Format: int32 */
            trackerTypeId?: number;
            uri?: string;
        });
        /** @description Properties of a tracker item reference */
        TrackerItemReferenceData: {
            /**
             * @description Type of suspect propagation
             * @enum {string}
             */
            suspectPropagation?: "DO_NOT_PROPAGATE" | "PROPAGATE" | "REVERSE" | "BIDIRECTIONAL";
        };
        /** @description One page of tracker item references. */
        TrackerItemReferenceSearchResult: {
            /** @description Found tracker item references */
            itemRefs?: components["schemas"]["TrackerItemReference"][];
            /**
             * Format: int32
             * @description Index of the page
             */
            page?: number;
            /**
             * Format: int32
             * @description Size of the found page
             */
            pageSize?: number;
            /**
             * Format: int32
             * @description Number of matched tracker items by the search criteria
             */
            total?: number;
        };
        /** @description References to a tracker item */
        TrackerItemRelationsResult: {
            /** @description References and associations to the item */
            downstreamReferences?: components["schemas"]["DownstreamTrackerItemReference"][];
            /** @description References and associations to the item */
            incomingAssociations?: components["schemas"]["IncomingTrackerItemAssociation"][];
            /** @description Set to true if it is the last page */
            isLastPage?: boolean;
            /**
             * Format: int32
             * @description Number of items on page
             */
            itemCount?: number;
            itemId?: components["schemas"]["TrackerItemRevision"];
            /** @description References and associations to the item */
            outgoingAssociations?: components["schemas"]["OutgoingTrackerItemAssociation"][];
            /**
             * Format: int32
             * @description Page no.
             */
            page?: number;
            /**
             * Format: int32
             * @description Page size
             */
            pageSize?: number;
            /** @description References and associations to the item */
            upstreamReferences?: components["schemas"]["UpstreamTrackerItemReference"][];
        };
        /** @description A tracker item review instance including its reviewers and their decisions */
        TrackerItemReview: {
            config?: components["schemas"]["TrackerItemReviewConfig"];
            /**
             * @description Whether the review is approved or rejected
             * @enum {string}
             */
            result?: "APPROVED" | "REJECTED" | "UNDECIDED";
            /** @description List of reviewers, and their votes */
            reviewers?: components["schemas"]["TrackerItemReviewVote"][];
            trackerItem?: components["schemas"]["TrackerItemRevision"];
        };
        /** @description The configuration from which the review was created */
        TrackerItemReviewConfig: {
            /**
             * Format: int32
             * @description Number of approvals after which the review is considered approved
             */
            requiredApprovals?: number;
            /**
             * Format: int32
             * @description Number of rejections after which the review is considered rejected
             */
            requiredRejections?: number;
            /**
             * @description Whether the user has to provide its credentials to vote
             * @enum {string}
             */
            requiredSignature?: "NONE" | "PASSWORD" | "USERNAME_AND_PASSWORD";
            /** @description Whether the reviewers have to chose in which of their roles do they want to vote */
            roleRequired?: boolean;
        };
        /** @description A tracker item review instance including its reviewers and their decisions */
        TrackerItemReviewExport: {
            /** @description List of reviewers and their votes */
            reviewers?: components["schemas"]["TrackerItemReviewVoteExport"][];
            /**
             * Format: int32
             * @description Version of the Tracker Item at the time of the review
             */
            trackerItemVersion?: number;
        };
        /** @description A tracker item review instance including its reviewers and their decisions */
        TrackerItemReviewVote: {
            asRole?: components["schemas"]["RoleReference"];
            /**
             * @description The result of this particular vote
             * @enum {string}
             */
            decision?: "APPROVED" | "REJECTED" | "UNDECIDED";
            /**
             * Format: date-time
             * @description Date and time of the vote
             */
            reviewedAt?: string;
            user?: components["schemas"]["UserReference"];
        };
        /** @description A reviewer and its vote for a particular Tracker Item Review instance */
        TrackerItemReviewVoteExport: {
            /** @description What the reviewer voted for */
            decision?: string;
            /** @description First name of the reviewer */
            firstName?: string;
            /** @description Last name of the reviewer */
            lastName?: string;
            /**
             * Format: date-time
             * @description Time at when the review was performed
             */
            reviewedAt?: string;
            /** @description Name of the role which the reviewer chose to use to vote */
            roleName?: string;
            /** @description Username of the user who voted */
            userName?: string;
        };
        /** @description Tracker item revision identifier */
        TrackerItemRevision: {
            /**
             * Format: int32
             * @description Tracker common item id
             */
            commonItemId?: number;
            /**
             * Format: int32
             * @description Tracker item id
             */
            id?: number;
            /**
             * Format: int32
             * @description Tracker item version
             */
            version?: number;
        };
        /** @description Change item for a tracker item field row. */
        TrackerItemRowChange: {
            type: "TrackerItemRowChange";
        } & (Omit<components["schemas"]["AbstractTrackerItemChange"], "type"> & {
            /**
             * Format: int32
             * @description Index of the changed row
             * @example 0
             */
            rowNumber?: number;
        });
        TrackerItemSearchRequest: {
            /**
             * Format: int32
             * @description Baseline on which the query is applied.
             * @example 1234
             */
            baselineId?: number;
            /**
             * Format: int32
             * @description Index of the page
             * @default 1
             * @example 1
             */
            page: number;
            /**
             * Format: int32
             * @description Size of the found page
             * @default 25
             * @example 25
             */
            pageSize: number;
            /**
             * @description CbQL query for the requested items
             * @example priority='Normal'
             */
            queryString: string;
        };
        /** @description One page of tracker items. */
        TrackerItemSearchResult: {
            /** @description Found tracker items */
            items?: components["schemas"]["TrackerItem"][];
            /**
             * Format: int32
             * @description Index of the page
             */
            page?: number;
            /**
             * Format: int32
             * @description Size of the found page
             */
            pageSize?: number;
            /**
             * Format: int32
             * @description Number of matched tracker items by the search criteria
             */
            total?: number;
        };
        /** @description A Tracker Item with all of its corresponding Tracker Item Reviews */
        TrackerItemWithTrackerItemReviewsExport: {
            trackerItem?: components["schemas"]["TrackerItem"];
            /** @description List of Tracker Item Reviews */
            trackerItemReviews?: components["schemas"]["TrackerItemReviewExport"][];
        };
        /** @description Request model for multiple items. */
        TrackerItemsRequest: {
            /** @description Item references. */
            items?: components["schemas"]["TrackerItemReference"][];
            /** @description Type of a ItemsRequest */
            type?: string;
        };
        TrackerPermission: {
            /** @description Description of the permission */
            description?: string;
            /**
             * Format: int32
             * @description Id of the entity
             */
            id?: number;
            /** @description Variable name of the permission */
            label?: string;
            /** @description Name of the entity */
            name?: string;
        };
        /** @description Reference to a tracker permission */
        TrackerPermissionReference: {
            type: "TrackerPermissionReference";
        } & Omit<components["schemas"]["AbstractReference"], "type">;
        /** @description Reference to a tracker */
        TrackerReference: {
            type: "TrackerReference";
        } & Omit<components["schemas"]["AbstractReference"], "type">;
        /** @description Settings of a report on a tracker. */
        TrackerReportSettings: {
            /**
             * @description CbQL query string of the report.
             * @example priority='Normal'
             */
            cbQl: string;
            /** @description Column definitions. */
            columns: components["schemas"]["ResizableReportColumnSettings"][];
            /**
             * @description Description of the report.
             * @example Normal priority items.
             */
            description: string;
            /**
             * @description Public report indicator.
             * @example true
             */
            isPublic: boolean;
            /**
             * @description Name of the report.
             * @example My first query
             */
            name: string;
            /** @description Reference level setting for Intelligent Table View. */
            referenceLevelSettings?: components["schemas"]["ReportReferenceLevelSettings"][];
            /**
             * @description Rendering method for Intelligent Table View.
             * @example table
             * @enum {string}
             */
            renderingMethod?: "disabled" | "table" | "tree";
            /**
             * Format: int32
             * @description Id of a report
             * @example 1
             */
            reportId?: number;
            /**
             * @description Indicator to ability to collapse/expand all child items.
             * @example false
             */
            showAllChildren?: boolean;
            /**
             * @description Indicator to show the ancestors of a result item.
             * @example true
             */
            showAncestors?: boolean;
            /**
             * @description Indicator to show the descendants of a result item.
             * @example false
             */
            showDescendants?: boolean;
            tracker: components["schemas"]["TrackerReference"];
        };
        /** @description One page of trackers. */
        TrackerSearchResult: {
            /**
             * Format: int32
             * @description Index of the page
             */
            page?: number;
            /**
             * Format: int32
             * @description Size of the found page
             */
            pageSize?: number;
            /**
             * Format: int32
             * @description Number of matched tracker items by the search criteria
             */
            total?: number;
            /** @description Found tracker items */
            trackers?: components["schemas"]["Tracker"][];
        };
        /** @description Properties of tracker tree */
        TrackerTree: {
            children?: components["schemas"]["TrackerTree"][];
            /** @description Folder or tracker */
            isFolder?: boolean;
            /** @description Name of a folder */
            text?: string;
            /**
             * Format: int32
             * @description Id of the tracker
             */
            trackerId?: number;
        };
        TrackerType: {
            /** @description True if tracker type is branchable */
            branchable?: boolean;
            /** @description Color of a tracker type */
            color?: string;
            /** @description True if tracker type has document view */
            docEditView?: boolean;
            /** @description Editor URL of a tracker type */
            editorUrl?: string;
            /**
             * Format: int32
             * @description Id of the entity
             */
            id?: number;
            /** @description Item icon URL of a tracker type */
            itemIconUrl?: string;
            /** @description Name of the entity */
            name?: string;
            /** @description True if outline is enabled */
            outline?: boolean;
            /** @description Tracker icon URL of a tracker type */
            trackerIconUrl?: string;
            /** @description URL link format of a tracker type */
            urlLinkFormat?: string;
            /** @description Internal/variable name of a tracker type */
            varName?: string;
        };
        /** @description Reference to a tracker type */
        TrackerTypeReference: {
            type: "TrackerTypeReference";
        } & Omit<components["schemas"]["AbstractReference"], "type">;
        /** @description Working-Set information where the Tracker exists */
        TrackerWorkingSet: {
            baseline?: components["schemas"]["TrackerBaselineReference"];
            branch?: components["schemas"]["BranchReference"];
            /**
             * Format: date-time
             * @description The date when the entity was created
             */
            createdAt?: string;
            createdBy?: components["schemas"]["UserReference"];
            /** @description Is the Working-Set deleted or not */
            deleted?: boolean;
            /** @description The Tracker is shared in Working-Set */
            sharedInWorkingSet?: boolean;
            workingSet?: components["schemas"]["WorkingSetReference"];
        };
        /** @description Describes an Unrestricted field permission. */
        UnrestrictedFieldPermission: Omit<components["schemas"]["BaseTrackerFieldPermission"], "type"> & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "UNRESTRICTED";
        };
        UpdateAttachment: {
            /** Format: binary */
            content?: string;
            /** @description Description */
            description?: string;
            /**
             * @description Format of description
             * @default PlainText
             * @enum {string}
             */
            descriptionFormat: "PlainText" | "Html" | "Wiki";
        };
        /** @description Request model to update Test Run's result for a Test Case */
        UpdateTestCaseRunRequest: {
            /** @description Optional conclusion text */
            conclusion?: string;
            /** @description Optional field values to set on the Test Run */
            customFields?: components["schemas"]["AbstractFieldValue"][];
            /** @description Optional reference list of Bugs attached to the Test result */
            reportedBugReferences?: components["schemas"]["TrackerItemReference"][];
            /**
             * @description Result of the test case
             * @enum {string}
             */
            result: "PASSED" | "FAILED" | "BLOCKED" | "NOT_APPLICABLE";
            /**
             * Format: int32
             * @description Optional runtime in seconds
             */
            runTime?: number;
            testCaseReference: components["schemas"]["TrackerItemReference"];
        };
        /** @description Model to contain Test Case run update request models */
        UpdateTestRunRequest: {
            /**
             * @description The propagation of the result is enabled for parent Test Run or not
             * @default true
             */
            parentResultPropagation: boolean;
            /** @description List of update Test Case run request models */
            updateRequestModels: components["schemas"]["UpdateTestCaseRunRequest"][];
        };
        /** @description Tracker item child update request */
        UpdateTrackerItemChildrenRequest: {
            /** @description Child items to update */
            children?: components["schemas"]["TrackerItemReference"][];
        };
        /** @description Update fields of a tracker item */
        UpdateTrackerItemField: {
            /** @description Fields of a tracker item */
            fieldValues?: components["schemas"]["AbstractFieldValue"][];
            /** @description Fields of a tracker item */
            tableValues?: components["schemas"]["TableFieldValue"][];
        };
        /** @description Update fields of a tracker item and provide the itemId as well */
        UpdateTrackerItemFieldWithItemId: {
            /** @description Fields of a tracker item */
            fieldValues?: components["schemas"]["AbstractFieldValue"][];
            /**
             * Format: int32
             * @description Id of a tracker item
             */
            itemId?: number;
            /** @description Fields of a tracker item */
            tableValues?: components["schemas"]["TableFieldValue"][];
        };
        UpdateTrackerItemTableField: {
            /** @description Table rows of a tracker table item */
            rows?: components["schemas"]["AbstractFieldValue"][][];
        };
        UploadAttachment: {
            /** @description Attachments of a comment */
            attachments?: string[];
        };
        /** @description Reference to other tracker item */
        UpstreamTrackerItemReference: {
            type: "UpstreamTrackerItemReference";
        } & Omit<components["schemas"]["AbstractTrackerItemReference"], "type">;
        /** @description Url field */
        UrlField: {
            type: "UrlField";
        } & Omit<components["schemas"]["AbstractField"], "type">;
        /** @description Value container of an url field */
        UrlFieldValue: {
            type: "UrlFieldValue";
        } & (Omit<WithRequired<components["schemas"]["AbstractFieldValue"], "type">, "type"> & {
            /** @description Value of the field */
            value?: string;
        });
        /** @description Properties of a codebeamer user */
        User: {
            /** @description Address of a user */
            address?: string;
            /** @description City of a user */
            city?: string;
            /** @description Company of a user */
            company?: string;
            /** @description Country of a user in ISO 3166-1 alpha-2 format */
            country?: string;
            /** @description Date format of a user */
            dateFormat?: string;
            /** @description Email of a user */
            email?: string;
            /** @description First name of a user */
            firstName?: string;
            /**
             * Format: int32
             * @description Id of the entity
             */
            id?: number;
            /** @description Language of a user in ISO 639-1 format */
            language?: string;
            /**
             * Format: date-time
             * @description Last login date of a user
             */
            lastLoginDate?: string;
            /** @description Last name of a user */
            lastName?: string;
            /** @description Mobile number of a user */
            mobile?: string;
            /** @description Name of the entity */
            name?: string;
            /** @description Phone number of a user */
            phone?: string;
            /**
             * Format: date-time
             * @description Registration date of a user
             */
            registryDate?: string;
            /** @description Skills of a user */
            skills?: string;
            /** @description State / providence of a user */
            state?: string;
            /**
             * @description Status of a user
             * @enum {string}
             */
            status?: "ACTIVATED" | "DISABLED" | "INACTIVATION";
            /**
             * @description Time zone of a user
             * @example America/New_York
             */
            timeZone?: string;
            /** @description Title of a user */
            title?: string;
            /** @description Zip of a user */
            zip?: string;
        };
        /** @description User item type choice field */
        UserChoiceField: {
            type: "UserChoiceField";
        } & (Omit<components["schemas"]["AbstractField"], "type"> & {
            /** @description Multiple values state of a field */
            multipleValues?: boolean;
            /** @description Type of the contained references */
            referenceType?: string;
        });
        UserFilteringRequest: {
            /**
             * @description Email of the user
             * @example john.doe@codebeamer.com
             */
            email?: string;
            /**
             * @description First name of the user
             * @example John
             */
            firstName?: string;
            /**
             * @description Last name of the user
             * @example Doe
             */
            lastName?: string;
            /**
             * @description Name of the user
             * @example John Doe
             */
            name?: string;
            /**
             * Format: int32
             * @description Id of the project where the user is a member
             */
            projectId?: number;
            /**
             * @description Status of the user
             * @enum {string}
             */
            userStatus?: "ACTIVATED" | "DISABLED" | "INACTIVATION";
        };
        /** @description Group of a codebeamer user */
        UserGroup: {
            /**
             * Format: date-time
             * @description The date when the entity was created
             */
            createdAt?: string;
            createdBy?: components["schemas"]["UserReference"];
            /** @description Description of a user group */
            description?: string;
            /**
             * Format: int32
             * @description Id of the entity
             */
            id?: number;
            /**
             * Format: date-time
             * @description The date when the entity was modified
             */
            modifiedAt?: string;
            modifiedBy?: components["schemas"]["UserReference"];
            /** @description Name of the entity */
            name?: string;
        };
        /** @description Reference to a user group */
        UserGroupReference: {
            type: "UserGroupReference";
        } & Omit<components["schemas"]["AbstractReference"], "type">;
        /** @description Reference to a user */
        UserReference: {
            type: "UserReference";
        } & (Omit<components["schemas"]["AbstractReference"], "type"> & {
            /** @description Display name of the user (formatted using the 'accountLink' application config) */
            displayName?: string;
            /** @description Email of a referenced user */
            email?: string;
        });
        /** @description Paginated search result of users */
        UserReferenceSearchResult: {
            /**
             * Format: int32
             * @description Index of the page
             */
            page?: number;
            /**
             * Format: int32
             * @description Size of the found page
             */
            pageSize?: number;
            /**
             * Format: int32
             * @description Number of matched tracker items by the search criteria
             */
            total?: number;
            /** @description Found users */
            users?: components["schemas"]["UserReference"][];
        };
        /** @description Paginated search result of users */
        UserSearchResult: {
            /**
             * Format: int32
             * @description Index of the page
             */
            page?: number;
            /**
             * Format: int32
             * @description Size of the found page
             */
            pageSize?: number;
            /**
             * Format: int32
             * @description Number of matched tracker items by the search criteria
             */
            total?: number;
            /** @description Found users */
            users?: components["schemas"]["User"][];
        };
        /** @description Paginated search result of outline wiki pages */
        WikiOutlineSearchResult: {
            /** @description Found outline wiki pages */
            outlineWikiPages?: components["schemas"]["OutlineWiki"][];
            /**
             * Format: int32
             * @description Index of the page
             */
            page?: number;
            /**
             * Format: int32
             * @description Size of the found page
             */
            pageSize?: number;
            /**
             * Format: int32
             * @description Number of matched tracker items by the search criteria
             */
            total?: number;
        };
        /** @description Wiki page details */
        WikiPage: {
            /** @description Summary of the changes in this wiki page version */
            changeComment?: string;
            /** @description Child pages of the current Wiki page */
            readonly childPages?: components["schemas"]["WikiPageReference"][];
            /** @description Comments/attachments associated with the wiki page */
            comments?: components["schemas"]["AttachmentReference"][];
            /**
             * Format: date-time
             * @description The date when the entity was created
             */
            createdAt?: string;
            createdBy?: components["schemas"]["UserReference"];
            /** @description Description of the entity */
            description?: string;
            /**
             * @description Description format of the entity
             * @enum {string}
             */
            descriptionFormat?: "PlainText" | "Html" | "Wiki";
            /**
             * Format: int32
             * @description Id of the entity
             */
            id?: number;
            /** @description Content markup of the wiki page */
            markup?: string;
            /**
             * Format: date-time
             * @description The date when the entity was modified
             */
            modifiedAt?: string;
            modifiedBy?: components["schemas"]["UserReference"];
            /** @description Name of the entity */
            name?: string;
            parent?: components["schemas"]["AbstractReference"];
            project?: components["schemas"]["ProjectReference"];
            /**
             * Format: int32
             * @description Version of the wiki page
             */
            version?: number;
        };
        /** @description Reference to a wiki page */
        WikiPageReference: {
            type: "WikiPageReference";
        } & Omit<components["schemas"]["AbstractReference"], "type">;
        /** @description Request model to render a wiki page in a specific context */
        WikiRenderRequest: {
            /**
             * Format: int32
             * @description Id of the entity used as rendering context
             */
            contextId?: number;
            /**
             * Format: int32
             * @description Version of the entity used as rendering context
             */
            contextVersion?: number;
            /**
             * @description Wiki markup to render as HTML
             * @example Hello __World__!
             */
            markup: string;
            /**
             * @description Type of the entity used as rendering context
             * @enum {string}
             */
            renderingContextType?: "TRACKER_ITEM" | "WIKI";
        };
        /** @description Wiki text field */
        WikiTextField: {
            type: "WikiTextField";
        } & (Omit<components["schemas"]["AbstractField"], "type"> & {
            /**
             * Format: int32
             * @description Max length of value of a field
             */
            max?: number;
            /**
             * Format: int32
             * @description Minimum length of value of a field
             */
            min?: number;
        });
        /** @description This model holds wiki text field values along with plain text value. */
        WikiTextFieldMultiValue: {
            type: "WikiTextFieldMultiValue";
        } & (Omit<WithRequired<components["schemas"]["AbstractFieldValue"], "type">, "type"> & {
            /** @description Plain text value of wiki text field. */
            plainTextValue?: string;
            /** @description Wiki text value */
            value?: string;
        });
        /** @description Value container of a wiki text field */
        WikiTextFieldValue: {
            type: "WikiTextFieldValue";
        } & (Omit<WithRequired<components["schemas"]["AbstractFieldValue"], "type">, "type"> & {
            /** @description Wiki text value */
            value?: string;
        });
        /** @description A transition in the workflow */
        WorkflowTransition: {
            /** @description Description of the entity */
            description?: string;
            /**
             * @description Description format of the entity
             * @enum {string}
             */
            descriptionFormat?: "PlainText" | "Html" | "Wiki";
            fromStatus?: components["schemas"]["ChoiceOptionReference"];
            /** @description Indicator if the transition is hidden */
            hidden?: boolean;
            /**
             * Format: int32
             * @description Id of the entity
             */
            id?: number;
            /** @description Name of the entity */
            name?: string;
            /** @description Access permissions of the transition */
            permissions?: components["schemas"]["AccessPermission"][];
            toStatus: components["schemas"]["ChoiceOptionReference"];
        };
        /** @description Information of a Working-Set */
        WorkingSetInformation: {
            /** @description The children of the given Working-Set */
            children?: components["schemas"]["WorkingSetReference"][];
            /**
             * Format: date-time
             * @description The date when the entity was created
             */
            createdAt?: string;
            createdBy?: components["schemas"]["UserReference"];
            /** @description Is the Working-Set deleted or not */
            deleted?: boolean;
            /**
             * Format: int32
             * @description Id of the entity
             */
            id?: number;
            /** @description Name of the entity */
            name?: string;
            parent?: components["schemas"]["WorkingSetReference"];
            project?: components["schemas"]["ProjectReference"];
            root?: components["schemas"]["WorkingSetReference"];
            /** @description Type of a referenced object */
            type?: string;
        };
        /** @description Working-Set Tracker Item mapping object */
        WorkingSetItemMapping: {
            source?: components["schemas"]["TrackerItemReference"];
            target?: components["schemas"]["TrackerItemReference"];
        };
        /** @description Working-Set Tracker Items mapping request object */
        WorkingSetItemsMappingRequest: {
            /** @description Tracker Items on Working-Set or on the Default Working-Set */
            items: components["schemas"]["TrackerItemReference"][];
            targetWorkingSet: components["schemas"]["WorkingSetReference"];
        };
        /** @description Minimal information of a Working-Set */
        WorkingSetMinimal: {
            /**
             * Format: date-time
             * @description The date when the Working-Set was created
             */
            createdAt?: string;
            /** @description Is the Working-Set deleted or not */
            deleted?: boolean;
            /**
             * Format: int32
             * @description Id of the entity
             */
            id?: number;
            /** @description Name of the entity */
            name?: string;
            /** @description Type of a referenced object */
            type?: string;
        };
        /** @description Request model trackers, roles and permissions. */
        WorkingSetPermissionRequest: {
            /** @description Permission references. */
            permissions?: components["schemas"]["TrackerPermissionReference"][];
            /** @description Role references. */
            roles?: components["schemas"]["RoleReference"][];
            /** @description Tracker references. */
            trackers?: components["schemas"]["TrackerReference"][];
        };
        WorkingSetReference: {
            type: "WorkingSetReference";
        } & Omit<components["schemas"]["AbstractReference"], "type">;
        /** @description Tracker information in Working-Set */
        WorkingSetTracker: {
            baseline?: components["schemas"]["AbstractBaselineReferenceModel"];
            /**
             * Format: date-time
             * @description Date of creation (Working-Set creation date for shared trackers, the date when the branch was created for included trackers)
             */
            createdAt?: string;
            /** @description Is the Tracker deleted or not */
            deleted?: boolean;
            /**
             * Format: int32
             * @description Id of the entity
             */
            id?: number;
            /** @description Name of the entity */
            name?: string;
            /** @description Shared in Working-Set */
            shared?: boolean;
            /** @description Type of a referenced object */
            type?: string;
        };
        WorkingSetTrackerUpdateRequest: {
            /** Format: int32 */
            baselineId?: number;
            cbql?: string;
            tracker: components["schemas"]["TrackerReference"];
        };
        WorkingSetUpdateRequest: {
            /** Format: int32 */
            projectBaselineId?: number;
            source: components["schemas"]["WorkingSetReference"];
            target: components["schemas"]["WorkingSetReference"];
            trackers?: components["schemas"]["WorkingSetTrackerUpdateRequest"][];
        };
        /** @description Based on WorkingSetUpdateRequest with additional transient fields support */
        WorkingSetUpdateWithTransientFieldsRequest: {
            /** Format: int32 */
            projectBaselineId?: number;
            source: components["schemas"]["WorkingSetReference"];
            target: components["schemas"]["WorkingSetReference"];
            trackers?: components["schemas"]["WorkingSetTrackerUpdateRequest"][];
            /** @description Names of fields marked as transient fields */
            transientFields?: string[];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getMasterSyncTime: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Sync time is fetched */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["EpochTime"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
            /** @description Unexpected error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorException"];
                };
            };
        };
    };
    getReadOnlySyncTime: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Sync time is fetched */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["EpochTime"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
            /** @description Unexpected error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorException"];
                };
            };
        };
    };
    createAssociation: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Association"];
            };
        };
        responses: {
            /** @description Created association */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Association"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RestException"];
                };
            };
            /** @description Authentication is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    getAvailableAssociationTypes: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of association types */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AssociationType"][];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RestException"];
                };
            };
            /** @description Authentication is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    getAssociationType: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                associationTypeId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Association type */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AssociationType"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RestException"];
                };
            };
            /** @description Authentication is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Association not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    getAssociation: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                associationId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Found association */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Association"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RestException"];
                };
            };
            /** @description Authentication is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Association not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    updateAssociation: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                associationId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Association"];
            };
        };
        responses: {
            /** @description Updated association */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Association"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RestException"];
                };
            };
            /** @description Authentication is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Association not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    deleteAssociation: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                associationId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Delete association by id */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RestException"];
                };
            };
            /** @description Authentication is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Association not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    getAssociationHistory: {
        parameters: {
            query?: {
                /** @description Index of the result page starting from 1. */
                page?: number;
                /** @description Number of items in a result page. Max value: 500 */
                pageSize?: number;
            };
            header?: never;
            path: {
                associationId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Association history */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ArtifactRevisionSearchResult"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RestException"];
                };
            };
            /** @description Authentication is required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceUnauthorizedException"];
                };
            };
            /** @description Association not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    getAttachment: {
        parameters: {
            query?: {
                version?: number;
            };
            header?: never;
            path: {
                attachmentId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Attachment by id */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Attachment"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RestException"];
                };
            };
            /** @description Authentication is required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceUnauthorizedException"];
                };
            };
            /** @description Authorization is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Tracker / Attachment not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    deleteAttachment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                attachmentId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Attachment deleted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RestException"];
                };
            };
            /** @description Authentication is required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResourceUnauthorizedException"];
                };
            };
            /** @description Access denied */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Attachment not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    getAttachmentContent: {
        parameters: {
            query?: {
                version?: number;
            };
            header?: never;
            path: {
                attachmentId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Attachment by id */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                    "application/octet-stream": string;
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RestException"];
                };
            };
            /** @description Authentication is required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceUnauthorizedException"];
                    "application/octet-stream": components["schemas"]["ResourceUnauthorizedException"];
                };
            };
            /** @description Authorization is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                    "application/octet-stream": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Tracker / Attachment not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                    "application/octet-stream": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                    "application/octet-stream": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    updateAttachment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                attachmentId: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": components["schemas"]["UpdateAttachment"];
            };
        };
        responses: {
            /** @description Updated attachment */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Attachment"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RestException"];
                };
            };
            /** @description Authentication is required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceUnauthorizedException"];
                };
            };
            /** @description Authorization is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Attachment not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
            /** @description Unexpected error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorException"];
                };
            };
        };
    };
    getAttachmentHistory: {
        parameters: {
            query?: {
                /** @description Index of the result page starting from 1. */
                page?: number;
                /** @description Number of items in a result page. Max value: 500 */
                pageSize?: number;
            };
            header?: never;
            path: {
                attachmentId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Attachment history */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ArtifactRevisionSearchResult"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestException"];
                };
            };
            /** @description Authentication is required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceUnauthorizedException"];
                };
            };
            /** @description Access denied */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Attachment not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    restoreAttachment: {
        parameters: {
            query: {
                version: number;
            };
            header?: never;
            path: {
                attachmentId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Restored attachment */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Attachment"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RestException"];
                };
            };
            /** @description Authentication is required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceUnauthorizedException"];
                };
            };
            /** @description Authorization is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Attachment not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
            /** @description Unexpected error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorException"];
                };
            };
        };
    };
    createBaseline: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateBaselineRequest"];
            };
        };
        responses: {
            /** @description Baseline created successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Baseline"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestException"];
                };
            };
            /** @description Authentication is required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceUnauthorizedException"];
                };
            };
            /** @description Authentication is required or user has no permission */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Project or tracker not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    getTrackerItemOnBranch: {
        parameters: {
            query: {
                sourceItemId: number;
            };
            header?: never;
            path: {
                branchId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Basic tracker item by id and branch id */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TrackerItem"];
                };
            };
            /** @description Authentication is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Tracker item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    uploadDeployment: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": components["schemas"]["DeploymentModel"];
            };
        };
        responses: {
            /** @description Deployment is executed */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JobReference"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestException"];
                };
            };
            /** @description Authentication is required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceUnauthorizedException"];
                };
            };
            /** @description Authentication is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
            /** @description Project Configuration Deployment is disabled */
            501: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotImplementedException"];
                };
            };
        };
    };
    exportForDeployment: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ExportForDeploymentRequest"];
            };
        };
        responses: {
            /** @description Export job has been scheduled successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JobReference"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestException"];
                };
            };
            /** @description Authentication is required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceUnauthorizedException"];
                };
            };
            /** @description Authorization is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
            /** @description Project Configuration Deployment is disabled */
            501: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotImplementedException"];
                };
            };
        };
    };
    exportToWord: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ExportToWordRequest"];
            };
        };
        responses: {
            /** @description It returns a job reference. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JobReference"];
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorException"];
                };
            };
        };
    };
    getTrackerItems: {
        parameters: {
            query?: {
                baselineId?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TrackerItemsRequest"];
            };
        };
        responses: {
            /** @description Tracker item list */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TrackerItem"][];
                };
            };
            /** @description Authentication is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Tracker not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    batchGetTrackerItemReviews: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BatchGetTrackerItemReviewsRequest"];
            };
        };
        responses: {
            /** @description List of tracker item reviews for each tracker item */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TrackerItemWithTrackerItemReviewsExport"][];
                };
            };
            /** @description Request cannot be processed */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestException"];
                };
            };
            /** @description Authentication is required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceUnauthorizedException"];
                };
            };
            /** @description Tracker item reviews are disabled, or access to them is denied */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description There is no baseline accessible with the supplied ID */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    getTrackerItemsAttachmentContents: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TrackerItemAttachmentRequest"];
            };
        };
        responses: {
            /** @description Attachments of tracker items: each tracker item goes to a subdirectory named as item-id and this directory contains the attachment files prefixed with the attachment id like [attachment-id]_[filename]. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/zip": string;
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestException"];
                    "application/zip": components["schemas"]["BadRequestException"];
                };
            };
            /** @description Authentication is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                    "application/zip": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Tracker items not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                    "application/zip": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                    "application/zip": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    bulkUpdateTrackerItemFields: {
        parameters: {
            query?: {
                /** @description If it's turned on the whole update will run in a single transaction. */
                atomic?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateTrackerItemFieldWithItemId"][];
            };
        };
        responses: {
            /** @description Bulk update response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BulkOperationResponse"];
                };
            };
            /** @description Request cannot be processed */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestException"];
                };
            };
            /** @description Authentication is required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceUnauthorizedException"];
                };
            };
            /** @description Authentication is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Tracker / Field not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
            /** @description Unexpected error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorException"];
                };
            };
        };
    };
    moveTrackerItems: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TrackerItemMoveRequest"];
            };
        };
        responses: {
            /** @description Background job information that is started to move the Tracker Items. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JobReference"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestException"];
                };
            };
            /** @description Authentication is required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceUnauthorizedException"];
                };
            };
            /** @description Access denied */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
            /** @description Unexpected error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorException"];
                };
            };
        };
    };
    getItemMoveFieldMapping: {
        parameters: {
            query: {
                /** @description The id of the source Tracker */
                sourceTrackerId: number;
                /** @description The id of the target Tracker */
                targetTrackerId: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The field mapping */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TrackerItemFieldMappingInfo"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RestException"];
                };
            };
            /** @description Authentication is required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceUnauthorizedException"];
                };
            };
            /** @description Access denied */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    findTrackerItems: {
        parameters: {
            query: {
                /** @description Baseline on which the queery is applied. */
                baselineId?: number;
                /** @description Index of the result page starting from 1. */
                page?: number;
                /** @description Number of items in a result page. Max value: 500 */
                pageSize?: number;
                /** @example priority='Normal' */
                queryString: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List tracker items by cbQL */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TrackerItemSearchResult"];
                };
            };
            /** @description Request cannot be processed */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestException"];
                };
            };
            /** @description Authentication is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    findTrackerItemsByCbQL: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TrackerItemSearchRequest"];
            };
        };
        responses: {
            /** @description List tracker items by cbQL */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TrackerItemSearchResult"];
                };
            };
            /** @description Request cannot be processed */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestException"];
                };
            };
            /** @description Authentication is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    getBaselineTrackerItemsRelations: {
        parameters: {
            query?: {
                baselineId?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TrackerItemsRequest"];
            };
        };
        responses: {
            /** @description Tracker item list */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TrackerItemRelationsResult"][];
                };
            };
            /** @description Authentication is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Tracker not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    getTrackerItem: {
        parameters: {
            query?: {
                version?: number;
                baselineId?: number;
            };
            header?: never;
            path: {
                itemId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Basic tracker item by id */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TrackerItem"];
                };
            };
            /** @description Authentication is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Tracker item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    updateTrackerItem: {
        parameters: {
            query?: {
                referenceItemId?: number;
                position?: "BEFORE" | "AFTER" | "BELOW";
            };
            header?: never;
            path: {
                itemId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TrackerItem"];
            };
        };
        responses: {
            /** @description Basic tracker item by id */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TrackerItem"];
                };
            };
            /** @description Request cannot be processed */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestException"];
                };
            };
            /** @description Authentication is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Tracker / Field not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Tracker item is locked */
            423: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceLockedException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
            /** @description Unexpected error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorException"];
                };
            };
        };
    };
    deleteTrackerItem: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                itemId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Basic tracker item by id */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TrackerItem"];
                };
            };
            /** @description Authentication is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Tracker not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Tracker item is locked */
            423: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceLockedException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
            /** @description Unexpected error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorException"];
                };
            };
        };
    };
    getTrackerItemAttachments: {
        parameters: {
            query?: {
                /** @description Filter by part of the filename of the attachments */
                fileName?: string;
            };
            header?: never;
            path: {
                /** @description Id of the tracker item */
                itemId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Attachments of tracker item */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AttachmentSearchResult"];
                };
            };
            /** @description Access denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceUnauthorizedException"];
                };
            };
            /** @description Authentication is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Tracker item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    uploadTrackerItemAttachment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                itemId: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": components["schemas"]["UploadAttachment"];
            };
        };
        responses: {
            /** @description Attachment of tracker item by id */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Attachment"][];
                };
            };
            /** @description Authentication is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Tracker not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Tracker item is locked */
            423: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceLockedException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    deleteTrackerItemAttachments: {
        parameters: {
            query?: {
                /** @description Delete attachment group or delete just the attachment and let the comment there */
                deleteAttachmentGroup?: boolean;
            };
            header?: never;
            path: {
                itemId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Attachments of tracker item removed */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Tracker not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Tracker item is locked */
            423: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResourceLockedException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    getTrackerItemAttachmentContents: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                itemId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Attachments of a tracker item: contains the attachment files prefixed with the attachment id like [attachment-id]_[filename]. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/zip": string;
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestException"];
                    "application/zip": components["schemas"]["BadRequestException"];
                };
            };
            /** @description Authentication is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                    "application/zip": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Tracker item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                    "application/zip": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                    "application/zip": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    getTrackerItemAttachment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                itemId: number;
                attachmentId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Attachment of tracker item by id */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Attachment"];
                };
            };
            /** @description Authentication is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Tracker / Attachment not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    deleteTrackerItemAttachment: {
        parameters: {
            query?: {
                /** @description Delete attachment group or delete just the attachment and let the comment there */
                deleteAttachmentGroup?: boolean;
            };
            header?: never;
            path: {
                itemId: number;
                attachmentId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Attachment of tracker item by id */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Attachment"];
                };
            };
            /** @description Authentication is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Tracker not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Tracker item is locked */
            423: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceLockedException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    getTrackerItemAttachmentContent: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                itemId: number;
                attachmentId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Attachment of tracker item by id */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": string;
                };
            };
            /** @description Authentication is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Tracker / Attachment not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    updateAttachmentOfTrackerItem: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                itemId: number;
                attachmentId: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": components["schemas"]["UpdateAttachment"];
            };
        };
        responses: {
            /** @description Updated attachment */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Attachment"];
                };
            };
            /** @description Authentication is required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceUnauthorizedException"];
                };
            };
            /** @description Authorization is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Tracker item or attachment not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Tracker item is locked */
            423: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceLockedException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
            /** @description Unexpected error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorException"];
                };
            };
        };
    };
    findTrackerItemChildren: {
        parameters: {
            query?: {
                /** @description Index of the result page starting from 1. */
                page?: number;
                /** @description Number of items in a result page. Max value: 500 */
                pageSize?: number;
            };
            header?: never;
            path: {
                itemId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List child items of a tracker item ordered by ordinal */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TrackerItemReferenceSearchResult"];
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestException"];
                };
            };
            /** @description Permission is required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceUnauthorizedException"];
                };
            };
            /** @description Authentication is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Tracker item is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    replaceChildrenOfTrackerItem: {
        parameters: {
            query?: {
                /** @description Number of items in the result page. Max value: 500 */
                resultPageSize?: number;
            };
            header?: never;
            path: {
                itemId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateTrackerItemChildrenRequest"];
            };
        };
        responses: {
            /** @description First page of the new child list */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TrackerItemReferenceSearchResult"];
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestException"];
                };
            };
            /** @description Permission is required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceUnauthorizedException"];
                };
            };
            /** @description Authentication is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Tracker item is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Tracker item is locked */
            423: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceLockedException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    addChildToTrackerItem: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                itemId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TrackerItemRevision"];
            };
        };
        responses: {
            /** @description Child item reference with index */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TrackerItemChildReference"];
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestException"];
                };
            };
            /** @description Permission is required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceUnauthorizedException"];
                };
            };
            /** @description Authentication is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Tracker item is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Tracker item is locked */
            423: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceLockedException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    patchChildrenOfTrackerItem: {
        parameters: {
            query: {
                mode: "INSERT" | "REPLACE" | "REMOVE";
            };
            header?: never;
            path: {
                itemId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TrackerItemChildReference"];
            };
        };
        responses: {
            /** @description New child item reference on the requested index */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TrackerItemChildReference"];
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestException"];
                };
            };
            /** @description Permission is required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceUnauthorizedException"];
                };
            };
            /** @description Authentication is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Tracker item is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Tracker item is locked */
            423: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceLockedException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    getTrackerItemComments: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Id of a tracker item */
                itemId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Comments of tracker item by id */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Comment"][];
                };
            };
            /** @description Authentication is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Tracker item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    commentOnTrackerItem: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                itemId: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": components["schemas"]["PostComment"];
            };
        };
        responses: {
            /** @description Comment of tracker item by id */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Comment"];
                };
            };
            /** @description Authentication is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Tracker item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Tracker item is locked */
            423: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceLockedException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    deleteTrackerItemComments: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                itemId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Comments deleted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Tracker item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Tracker item is locked */
            423: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResourceLockedException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    getTrackerItemComment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                itemId: number;
                commentId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Comment of tracker item by id */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Comment"];
                };
            };
            /** @description Authentication is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Tracker item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    editCommentOnTrackerItem: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                itemId: number;
                commentId: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": components["schemas"]["EditComment"];
            };
        };
        responses: {
            /** @description Edited comment */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Comment"];
                };
            };
            /** @description Authentication is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Tracker not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Tracker item is locked */
            423: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceLockedException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
            /** @description Unexpected error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorException"];
                };
            };
        };
    };
    replyOnCommentOfTrackerItem: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                itemId: number;
                commentId: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": components["schemas"]["PostComment"];
            };
        };
        responses: {
            /** @description Comment of tracker item by id */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Comment"];
                };
            };
            /** @description Authentication is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Tracker not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Tracker item is locked */
            423: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceLockedException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    deleteTrackerItemComment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                itemId: number;
                commentId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Comment of tracker item by id */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Comment"];
                };
            };
            /** @description Authentication is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Tracker item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Tracker item is locked */
            423: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceLockedException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    getTrackerItemFields: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                itemId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Fields of tracker item by id */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TrackerItemField"];
                };
            };
            /** @description Request cannot be processed */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestException"];
                };
            };
            /** @description Authentication is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Tracker / Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
            /** @description Unexpected error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorException"];
                };
            };
        };
    };
    updateCustomFieldTrackerItem: {
        parameters: {
            query?: {
                /** @description If it's turned on HTTP 200 with empty response indicates that the update was successful. */
                quietMode?: boolean;
            };
            header?: never;
            path: {
                itemId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateTrackerItemField"];
            };
        };
        responses: {
            /** @description Basic tracker item by id */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TrackerItem"];
                };
            };
            /** @description Request cannot be processed */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestException"];
                };
            };
            /** @description Authentication is required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceUnauthorizedException"];
                };
            };
            /** @description Authentication is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Tracker / Field not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Tracker item is locked */
            423: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceLockedException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
            /** @description Unexpected error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorException"];
                };
            };
        };
    };
    getItemAccessibility: {
        parameters: {
            query?: {
                targetStatusId?: number;
            };
            header?: never;
            path: {
                /** @description Tracker item id */
                itemId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Accessibility returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TrackerItemFieldAccessibilityList"];
                };
            };
            /** @description Authentication is required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceUnauthorizedException"];
                };
            };
            /** @description Tracker item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    updateTableFieldTrackerItem: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                itemId: number;
                tableFieldId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateTrackerItemTableField"];
            };
        };
        responses: {
            /** @description Basic tracker item by id */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TrackerItem"];
                };
            };
            /** @description Request cannot be processed */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestException"];
                };
            };
            /** @description Authentication is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Tracker / Field not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Tracker item is locked */
            423: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceLockedException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
            /** @description Unexpected error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorException"];
                };
            };
        };
    };
    getChoiceOptions: {
        parameters: {
            query?: {
                /** @description Index of the result page starting from 1. */
                page?: number;
                /** @description Number of items in a result page. Max value: 500 */
                pageSize?: number;
            };
            header?: never;
            path: {
                itemId: number;
                fieldId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Options */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReferenceSearchResult"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RestException"];
                };
            };
            /** @description Authentication is required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceUnauthorizedException"];
                };
            };
            /** @description Authentication is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description No option found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    getTrackerItemHistory: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                itemId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Basic tracker item by id */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TrackerItemHistory"];
                };
            };
            /** @description Authentication is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Tracker not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    checkTrackerItemLock: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Tracker item id */
                itemId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Details of the lock, or an empty response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LockInfo"];
                };
            };
            /** @description Authentication is required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceUnauthorizedException"];
                };
            };
            /** @description Wiki page not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    lockTrackerItem: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Tracker item id */
                itemId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LockRequest"];
            };
        };
        responses: {
            /** @description Lock acquired successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request, request validation error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestException"];
                };
            };
            /** @description Authentication is required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceUnauthorizedException"];
                };
            };
            /** @description Could not acquire lock */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Wiki page not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    unlockTrackerItem: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Tracker item id */
                itemId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Unlock successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication is required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceUnauthorizedException"];
                };
            };
            /** @description Could not unlock */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Wiki page not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    getBaselineTrackerItemRelations: {
        parameters: {
            query?: {
                baselineId?: number;
                /** @description Index of page, starting from 1. */
                page?: number;
                /** @description Number of items per page. Max value: 500 */
                pageSize?: number;
            };
            header?: never;
            path: {
                itemId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Tracker item list */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TrackerItemRelationsResult"];
                };
            };
            /** @description Authentication is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Tracker not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    getTrackerItemReviews: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                itemId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of tracker item reviews for the particular item */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TrackerItemReview"][];
                };
            };
            /** @description Request cannot be processed */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestException"];
                };
            };
            /** @description Authentication is required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceUnauthorizedException"];
                };
            };
            /** @description Tracker item reviews are disabled, or access to them is denied */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Tracker item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    getTrackerItemTransitions: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                itemId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Available transitions */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkflowTransition"][];
                };
            };
            /** @description Authentication is required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceUnauthorizedException"];
                };
            };
            /** @description Missing user permissions */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Tracker item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorException"];
                };
            };
        };
    };
    getBackgroundJob: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                jobId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Background Job Info */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BackgroundJob"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RestException"];
                };
            };
            /** @description Authentication is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Job not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    updateWorkingSet: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["WorkingSetUpdateRequest"];
            };
        };
        responses: {
            /** @description Job has been scheduled successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JobReference"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestException"];
                };
            };
            /** @description Authentication is required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceUnauthorizedException"];
                };
            };
            /** @description Authorization is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
            /** @description Unexpected error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorException"];
                };
            };
        };
    };
    updateWorkingSetWithTransientFields: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["WorkingSetUpdateWithTransientFieldsRequest"];
            };
        };
        responses: {
            /** @description Job has been scheduled successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JobReference"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestException"];
                };
            };
            /** @description Authentication is required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceUnauthorizedException"];
                };
            };
            /** @description Authorization is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
            /** @description Unexpected error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorException"];
                };
            };
        };
    };
    migrateAttachments: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AttachmentMigrationRequest"];
            };
        };
        responses: {
            /** @description Attachments are migrated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestException"];
                };
            };
            /** @description Authentication is required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceUnauthorizedException"];
                };
            };
            /** @description Access denied */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    getProjects: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Projects */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProjectReference"][];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RestException"];
                };
            };
            /** @description Authentication is required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceUnauthorizedException"];
                };
            };
            /** @description Authentication is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Project not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    deployConfiguration: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DeployProject"];
            };
        };
        responses: {
            /** @description Project configuration deployed */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Project"];
                };
            };
            /** @description Request cannot be processed */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestException"];
                };
            };
            /** @description Authentication is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Project or configuration file not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
            /** @description Error when deploying the project configuration. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorException"];
                };
            };
        };
    };
    searchProjects: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProjectFilteringRequest"];
            };
        };
        responses: {
            /** @description One page of projects */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProjectSearchResult"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestException"];
                };
            };
            /** @description Authentication is required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceUnauthorizedException"];
                };
            };
            /** @description Access denied */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    getProjectById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                projectId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Project */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Project"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RestException"];
                };
            };
            /** @description Authentication is required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceUnauthorizedException"];
                };
            };
            /** @description Authentication is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Project not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    listAllWorkingSetsOfProject: {
        parameters: {
            query?: {
                /** @description The result lists the deleted Working-Sets */
                includeDeleted?: boolean;
            };
            header?: never;
            path: {
                /** @description The id of the project */
                projectId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of top-level Working-Set */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkingSetMinimal"][];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestException"];
                };
            };
            /** @description Authentication is required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceUnauthorizedException"];
                };
            };
            /** @description Authorization is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
            /** @description Unexpected error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorException"];
                };
            };
        };
    };
    export: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                projectId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ExportProject"];
            };
        };
        responses: {
            /** @description The exported project contents in a zip file. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/zip": string;
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestException"];
                    "application/zip": components["schemas"]["BadRequestException"];
                };
            };
            /** @description Authentication is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                    "application/zip": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Project not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                    "application/zip": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                    "application/zip": components["schemas"]["TooManyRequestsException"];
                };
            };
            /** @description Error during the project export */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorException"];
                    "application/zip": components["schemas"]["InternalServerErrorException"];
                };
            };
        };
    };
    getMembersOfProject: {
        parameters: {
            query?: {
                /** @description Index of the result page starting from 1. */
                page?: number;
                /** @description Number of items in a result page. Max value: 500 */
                pageSize?: number;
            };
            header?: never;
            path: {
                projectId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Member by id */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MemberReferenceSearchResult"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RestException"];
                };
            };
            /** @description Authentication is required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceUnauthorizedException"];
                };
            };
            /** @description Authentication is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Project is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    getProjectRolesOfMember: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                projectId: number;
                userId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Roles */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProjectMemberPermissions"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RestException"];
                };
            };
            /** @description Authentication is required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceUnauthorizedException"];
                };
            };
            /** @description Project or User is not found / User is not a member of the project */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    getTrackers: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                projectId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Trackers */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TrackerReference"][];
                };
            };
            /** @description Authentication is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Project / Tracker not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    createTracker: {
        parameters: {
            query?: {
                /** @description Identifier of the template tracker. */
                templateId?: number;
            };
            header?: never;
            path: {
                projectId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Tracker"];
            };
        };
        responses: {
            /** @description Tracker settings */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Tracker"];
                };
            };
            /** @description Authentication is required / Bad request: Tracker settings validation failed. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Tracker not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    searchAllTrackersInProject: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                projectId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TrackerFilteringRequest"];
            };
        };
        responses: {
            /** @description Trackers */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TrackerSearchResult"];
                };
            };
            /** @description Authentication is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Project / Tracker not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    renderWikiMarkup: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                projectId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["WikiRenderRequest"];
            };
        };
        responses: {
            /** @description The wiki content rendered as HTML */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                    "text/html": string;
                };
            };
            /** @description Request cannot be processed */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestException"];
                    "text/html": components["schemas"]["BadRequestException"];
                };
            };
            /** @description Authentication is required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceUnauthorizedException"];
                    "text/html": components["schemas"]["ResourceUnauthorizedException"];
                };
            };
            /** @description Access denied */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                    "text/html": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description The wiki page does not exist, or the artifact is not a wiki page */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                    "text/html": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                    "text/html": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    getTopLevelWikiPages: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the project */
                projectId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The list of wiki pages */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WikiOutlineSearchResult"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RestException"];
                };
            };
            /** @description Authentication is required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceUnauthorizedException"];
                };
            };
            /** @description Access denied */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description The project does not exist */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    listWorkingSetsOfProject: {
        parameters: {
            query?: {
                /** @description The result lists the deleted Working-Sets */
                includeDeleted?: boolean;
            };
            header?: never;
            path: {
                /** @description The id of the project */
                projectId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of top-level Working-Set */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkingSetMinimal"][];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestException"];
                };
            };
            /** @description Authentication is required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceUnauthorizedException"];
                };
            };
            /** @description Authorization is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
            /** @description Unexpected error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorException"];
                };
            };
        };
    };
    createReport: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SimpleReportSettings"];
            };
        };
        responses: {
            /** @description Report settings */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SimpleReportSettings"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestException"];
                };
            };
            /** @description Authentication is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    updateReport: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Id of a report */
                reportId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SimpleReportSettings"];
            };
        };
        responses: {
            /** @description Updated report settings */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SimpleReportSettings"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestException"];
                };
            };
            /** @description Authentication is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    getReportItemsById: {
        parameters: {
            query?: {
                /** @description Index of a report page starting from 1. */
                page?: number;
                /** @description Number of items a report page. Max value: 500 */
                pageSize?: number;
            };
            header?: never;
            path: {
                /** @description Id of a report */
                reportId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Report items by id */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReportItemResult"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RestException"];
                };
            };
            /** @description Authentication is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Report not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    getReportById: {
        parameters: {
            query?: {
                /** @description Index of a report page starting from 1. */
                page?: number;
                /** @description Number of items a report page. Max value: 500 */
                pageSize?: number;
            };
            header?: never;
            path: {
                /** @description Id of a report */
                reportId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Report content by id */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReportResult"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RestException"];
                };
            };
            /** @description Authentication is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Report not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    getRoles: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Roles */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RoleReference"][];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RestException"];
                };
            };
            /** @description Authentication is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Role not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    getRole: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                roleId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Roles */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Role"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RestException"];
                };
            };
            /** @description Authentication is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Role not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    getAuditPermissions: {
        parameters: {
            query?: {
                /** @description Index of page, starting from 1. */
                page?: number;
                /** @description Number of items per page. Max value: 100 */
                pageSize?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AuditPermissionsRequest"];
            };
        };
        responses: {
            /** @description The processing finished successfully, the response contains audit permission entries */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedAuditPermissionsResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RestException"];
                };
            };
            /** @description Authentication is required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceUnauthorizedException"];
                };
            };
            /** @description Access denied */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Unprocessable content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InvalidParametersException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorException"];
                };
            };
        };
    };
    getSystemStatus: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description System maintenance status */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SystemStatus"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RestException"];
                };
            };
            /** @description Authentication is required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceUnauthorizedException"];
                };
            };
            /** @description Access denied */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    setSystemStatus: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MaintenanceMode"];
            };
        };
        responses: {
            /** @description System maintenance status */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SystemStatus"];
                };
            };
            /** @description Request cannot be processed */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestException"];
                };
            };
            /** @description Authentication is required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceUnauthorizedException"];
                };
            };
            /** @description Access denied */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    autoApplyStepReuses: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AutoApplyTestStepReuses"];
            };
        };
        responses: {
            /** @description The item-references of the modified tracker-items where duplicate Test Steps was found and converted to Reuses */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TrackerItemReference"][];
                };
            };
            /** @description Authentication is required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceUnauthorizedException"];
                };
            };
            /** @description Authentication is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    updateTestRunResult: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                testRunId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateTestRunRequest"];
            };
        };
        responses: {
            /** @description Updated Test Run item */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TrackerItem"];
                };
            };
            /** @description Request cannot be processed */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestException"];
                };
            };
            /** @description Authentication is required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceUnauthorizedException"];
                };
            };
            /** @description Access denied */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Test run not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Tracker item is locked */
            423: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceLockedException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    getTraceabilityInitialItemIds: {
        parameters: {
            query?: {
                /** @description Number of items in a result page. */
                pageSize?: number;
                /** @description Index of the result page. */
                pageNo?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TraceabilityInitialLevelFilter"];
            };
        };
        responses: {
            /** @description Tracker item list */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TraceabilityItem"][];
                };
            };
            /** @description Authentication is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Tracker not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    getTraceabilityLevelItemIds: {
        parameters: {
            query?: {
                /** @description Number of items per level. */
                itemsOnLevel?: number;
                /** @description Number of items per item. */
                itemsFromPreviousItem?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TraceabilityLevelFilter"];
            };
        };
        responses: {
            /** @description Traceability items list */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TraceabilityResult"];
                };
            };
            /** @description Authentication is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    postTrackerConfiguration: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TrackerConfiguration"];
            };
        };
        responses: {
            /** @description Tracker configuration saved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TrackerConfiguration"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RestException"];
                };
            };
            /** @description Authentication is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Tracker not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Invalid tracker configuration */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InvalidParametersException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
            /** @description Tracker update failed */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorException"];
                };
            };
        };
    };
    getTrackerConfiguration: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                trackerId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Tracker configuration */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TrackerConfiguration"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RestException"];
                };
            };
            /** @description Authentication is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Tracker not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
            /** @description Failed to retrieve the Tracker */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorException"];
                };
            };
        };
    };
    getTrackerPermissions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Tracker permissions. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TrackerPermissionReference"][];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RestException"];
                };
            };
            /** @description Authentication is required. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Tracker permission is not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    getTrackerPermission: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                trackerPermissionId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Tracker permission. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TrackerPermission"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RestException"];
                };
            };
            /** @description Authentication is required. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    createExternalScmRepository: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description CB project id */
                projectId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ExternalScmRepositoryRequest"];
            };
        };
        responses: {
            /** @description Repository tracker item id */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": number;
                };
            };
            /** @description Bad request, request validation error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestException"];
                };
            };
            /** @description Authentication is required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceUnauthorizedException"];
                };
            };
            /** @description Authentication is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
            /** @description Unexpected error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorException"];
                };
            };
        };
    };
    updateExternalScmRepository: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description CB project id */
                projectId: number;
                /** @description CB repository id */
                repositoryId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ExternalScmRepositoryRequest"];
            };
        };
        responses: {
            /** @description Repository tracker item id */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": number;
                };
            };
            /** @description Bad request, request validation error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestException"];
                };
            };
            /** @description Authentication is required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceUnauthorizedException"];
                };
            };
            /** @description Authentication is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
            /** @description Unexpected error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorException"];
                };
            };
        };
    };
    listTrackerTree: {
        parameters: {
            query: {
                projectId: number;
                workingSetId?: number;
                revision?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Tracker tree listed */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TrackerTree"][];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestException"];
                };
            };
            /** @description Authentication is required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceUnauthorizedException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    updateTrackerTree: {
        parameters: {
            query: {
                projectId: number;
                workingSetId?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TrackerTree"][];
            };
        };
        responses: {
            /** @description Tracker tree updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JsonView"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestException"];
                };
            };
            /** @description Authentication is required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceUnauthorizedException"];
                };
            };
            /** @description Access denied */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    getTrackerTypes: {
        parameters: {
            query?: {
                /** @description Outline is enabled, disabled or any(no filtering will be applied). */
                outline?: "ENABLED" | "DISABLED" | "ANY";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Tracker types */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TrackerTypeReference"][];
                };
            };
            /** @description Authentication is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    getTrackerType: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                trackerTypeId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Tracker type */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TrackerType"];
                };
            };
            /** @description Authentication is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Tracker type is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    uploadAutomatedTestResults: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                testRunTrackerId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AutomatedTestRunRequest"];
            };
        };
        responses: {
            /** @description The newly created test run */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TrackerItem"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestException"];
                };
            };
            /** @description Authorization is required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceUnauthorizedException"];
                };
            };
            /** @description Authentication is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorException"];
                };
            };
        };
    };
    createTestRunForTestCase: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                testRunTrackerId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateTestRunRequest"];
            };
        };
        responses: {
            /** @description The newly created test run */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TrackerItem"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestException"];
                };
            };
            /** @description Authentication is required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceUnauthorizedException"];
                };
            };
            /** @description Authorization is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Tracker is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorException"];
                };
            };
        };
    };
    createTestRunForTestSets: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                testRunTrackerId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateTestRunFromTestSetsRequest"];
            };
        };
        responses: {
            /** @description The newly created test run */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TestRunResult"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestException"];
                };
            };
            /** @description Authentication is required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceUnauthorizedException"];
                };
            };
            /** @description Authorization is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Tracker is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorException"];
                };
            };
        };
    };
    getTracker: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                trackerId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Tracker */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Tracker"];
                };
            };
            /** @description Authentication is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Project / Tracker not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    updateTracker: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                trackerId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Tracker"];
            };
        };
        responses: {
            /** @description Tracker settings */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Tracker"];
                };
            };
            /** @description Authentication is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Tracker not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    deleteTracker: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                trackerId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Tracker deleted. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Tracker is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    getTrackerBaselines: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                trackerId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Baselines of the tracker */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReferenceSearchResult"];
                };
            };
            /** @description Not authorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceUnauthorizedException"];
                };
            };
            /** @description Authentication is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Tracker is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorException"];
                };
            };
        };
    };
    findTrackerChildren: {
        parameters: {
            query?: {
                /** @description Index of the result page starting from 1. */
                page?: number;
                /** @description Number of items in a result page. Max value: 500 */
                pageSize?: number;
            };
            header?: never;
            path: {
                trackerId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List child items of a tracker item ordered by ordinal */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TrackerItemReferenceSearchResult"];
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestException"];
                };
            };
            /** @description Permission is required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceUnauthorizedException"];
                };
            };
            /** @description Authentication is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Tracker is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    replaceChildrenOfTracker: {
        parameters: {
            query?: {
                /** @description Number of items in the result page. Max value: 500 */
                resultPageSize?: number;
            };
            header?: never;
            path: {
                trackerId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateTrackerItemChildrenRequest"];
            };
        };
        responses: {
            /** @description First page of the new child list */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TrackerItemReferenceSearchResult"];
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestException"];
                };
            };
            /** @description Permission is required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceUnauthorizedException"];
                };
            };
            /** @description Authentication is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Tracker is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Tracker item is locked */
            423: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceLockedException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    addChildToTracker: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                trackerId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TrackerItemRevision"];
            };
        };
        responses: {
            /** @description Child item reference with index */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TrackerItemChildReference"];
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestException"];
                };
            };
            /** @description Permission is required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceUnauthorizedException"];
                };
            };
            /** @description Authentication is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Tracker is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Tracker item is locked */
            423: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceLockedException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    patchChildrenOfTracker: {
        parameters: {
            query?: {
                mode?: "INSERT";
            };
            header?: never;
            path: {
                trackerId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TrackerItemChildReference"];
            };
        };
        responses: {
            /** @description New child item reference on the requested index */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TrackerItemChildReference"];
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestException"];
                };
            };
            /** @description Permission is required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceUnauthorizedException"];
                };
            };
            /** @description Authentication is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Tracker is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Tracker item is locked */
            423: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceLockedException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    getTrackerFields: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                trackerId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Field references */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FieldReference"][];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RestException"];
                };
            };
            /** @description Authentication is required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceUnauthorizedException"];
                };
            };
            /** @description Authentication is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Field not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    getTrackerFieldsPermissions: {
        parameters: {
            query?: {
                statusId?: number;
            };
            header?: never;
            path: {
                trackerId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Permissions by status and role */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TrackerFieldsStatusPermissions"];
                };
            };
            /** @description Status id is invalid */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestException"];
                };
            };
            /** @description Authentication is required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceUnauthorizedException"];
                };
            };
            /** @description Authorization is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Tracker not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    getTrackerField: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                trackerId: number;
                fieldId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Field by id */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AbstractField"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RestException"];
                };
            };
            /** @description Authentication is required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceUnauthorizedException"];
                };
            };
            /** @description Authentication is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Field not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    getChoiceOption: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                trackerId: number;
                fieldId: number;
                optionId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Option by id */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ChoiceOptionReference"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RestException"];
                };
            };
            /** @description Authentication is required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceUnauthorizedException"];
                };
            };
            /** @description Authentication is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Option not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    getTrackerFieldPermissions: {
        parameters: {
            query?: {
                statusId?: number;
            };
            header?: never;
            path: {
                trackerId: number;
                fieldId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Permissions by status and role */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TrackerFieldStatusPermissions"][];
                };
            };
            /** @description Status id is invalid */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestException"];
                };
            };
            /** @description Authentication is required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceUnauthorizedException"];
                };
            };
            /** @description Authorization is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Tracker or field not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    updateTrackerIcon: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Id of the tracker */
                trackerId: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /**
                     * Format: binary
                     * @description Icon image file
                     */
                    icon: string;
                };
            };
        };
        responses: {
            /** @description Tracker icon uploaded successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Could not read image from the request, or it's the wrong format */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BadRequestException"];
                };
            };
            /** @description Authentication is required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResourceUnauthorizedException"];
                };
            };
            /** @description The tracker could not be accessed */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Tracker not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    getItemsByTracker: {
        parameters: {
            query?: {
                /** @description Index of the result page starting from 1. */
                page?: number;
                /** @description Number of items in a result page. Max value: 500 */
                pageSize?: number;
            };
            header?: never;
            path: {
                trackerId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of tracker items */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TrackerItemReferenceSearchResult"];
                };
            };
            /** @description Request cannot be processed */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestException"];
                };
            };
            /** @description Authentication is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Tracker is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    createTrackerItem: {
        parameters: {
            query?: {
                parentItemId?: number;
                referenceItemId?: number;
                position?: "BEFORE" | "AFTER" | "BELOW";
            };
            header?: never;
            path: {
                trackerId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TrackerItem"];
            };
        };
        responses: {
            /** @description Basic tracker item by id */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TrackerItem"];
                };
            };
            /** @description Request cannot be processed */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestException"];
                };
            };
            /** @description Authentication is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Tracker / Field not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
            /** @description Unexpected error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorException"];
                };
            };
        };
    };
    getTrackerOutline: {
        parameters: {
            query?: {
                /** @description Show only the children of this item. */
                parentItemId?: number;
                /** @description The depth level of the result outline. */
                resultDepthFilter?: number;
            };
            header?: never;
            path: {
                trackerId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Outline of the tracker */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OutlineItemSearchResult"];
                };
            };
            /** @description Request cannot be processed */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestException"];
                };
            };
            /** @description Not authorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceUnauthorizedException"];
                };
            };
            /** @description Authentication is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Tracker is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorException"];
                };
            };
        };
    };
    getTrackerPermissionsWithRoles: {
        parameters: {
            query?: {
                userId?: number;
                roleId?: number;
            };
            header?: never;
            path: {
                trackerId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Tracker permissions by role. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RoleWithPermissions"][];
                };
            };
            /** @description No access permission for this resource */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestException"];
                };
            };
            /** @description Authentication is required. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Tracker is not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    getTrackerReports: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                trackerId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Tracker report reference list */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReportReference"][];
                };
            };
            /** @description Authentication is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Tracker not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorException"];
                };
            };
        };
    };
    createTrackerReport: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                trackerId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TrackerReportSettings"];
            };
        };
        responses: {
            /** @description Tracker report settings */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TrackerReportSettings"];
                };
            };
            /** @description Authentication is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Tracker not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    updateTrackerReport: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                trackerId: number;
                reportId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TrackerReportSettings"];
            };
        };
        responses: {
            /** @description Tracker report settings */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TrackerReportSettings"];
                };
            };
            /** @description Authentication is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Tracker / Report not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    deleteTrackerReport: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                trackerId: number;
                reportId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Tracker report deleted. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Tracker / Report not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    getTrackerReportItems: {
        parameters: {
            query?: {
                /** @description Index of a report page starting from 1. */
                page?: number;
                /** @description Number of items a report page. Max value: 500 */
                pageSize?: number;
            };
            header?: never;
            path: {
                trackerId: number;
                reportId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Tracker report items */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReportItemResult"];
                };
            };
            /** @description Authentication is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Tracker / Report not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    getTrackerReport: {
        parameters: {
            query?: {
                /** @description Index of a report page starting from 1. */
                page?: number;
                /** @description Number of items a report page. Max value: 500 */
                pageSize?: number;
            };
            header?: never;
            path: {
                trackerId: number;
                reportId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Tracker report */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReportResult"];
                };
            };
            /** @description Authentication is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Tracker / Report not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    updatePermission: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                trackerId: number;
                roleId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PermissionIdsRequest"];
            };
        };
        responses: {
            /** @description Tracker permissions are set */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RoleWithPermissions"][];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RestException"];
                };
            };
            /** @description Authentication is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Tracker / permission / roles not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    removePermissions: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                trackerId: number;
                roleId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Tracker permissions were removed. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RestException"];
                };
            };
            /** @description Authentication is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Tracker/role is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    getTrackerSchema: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                trackerId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Field definitions */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AbstractField"][];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RestException"];
                };
            };
            /** @description Authentication is required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceUnauthorizedException"];
                };
            };
            /** @description Authentication is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Field not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    getTrackerTransitions: {
        parameters: {
            query?: {
                /** @description The from status id filter for transitions. */
                fromStatusId?: number;
            };
            header?: never;
            path: {
                trackerId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Tracker transition list */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkflowTransition"][];
                };
            };
            /** @description Authentication is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Tracker not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorException"];
                };
            };
        };
    };
    getTrackerWorkingSets: {
        parameters: {
            query?: {
                /** @description Find Tracker or Branch if deleted and the result contains the deleted Working-Sets */
                includeDeleted?: boolean;
            };
            header?: never;
            path: {
                /** @description Tracker or Branch id */
                trackerId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of Working-Sets that contain the given tracker. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TrackerWorkingSet"][];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestException"];
                };
            };
            /** @description Authentication is required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceUnauthorizedException"];
                };
            };
            /** @description Authorization is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
            /** @description Unexpected error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorException"];
                };
            };
        };
    };
    getUsers: {
        parameters: {
            query?: {
                /** @description Index of the result page starting from 1. */
                page?: number;
                /** @description Number of items in a result page. Max value: 500 */
                pageSize?: number;
                groupId?: number;
                /** @example Intland */
                queryString?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Users */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserReferenceSearchResult"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RestException"];
                };
            };
            /** @description Authentication is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    getUserByEmail: {
        parameters: {
            query: {
                email: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RestException"];
                };
            };
            /** @description Authentication is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description User not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    getUserByName: {
        parameters: {
            query: {
                name: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RestException"];
                };
            };
            /** @description Authentication is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description User not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    getGroups: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User Group references */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserGroupReference"][];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RestException"];
                };
            };
            /** @description Authentication is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    getGroup: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                groupId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User Group */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserGroup"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RestException"];
                };
            };
            /** @description Authentication is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description User Group is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    getGroupMembers: {
        parameters: {
            query?: {
                /** @description Index of the result page starting from 1. */
                page?: number;
                /** @description Number of items in a result page. Max value: 500 */
                pageSize?: number;
            };
            header?: never;
            path: {
                groupId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Member by id */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserReferenceSearchResult"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RestException"];
                };
            };
            /** @description Authentication is required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceUnauthorizedException"];
                };
            };
            /** @description Authentication is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description User group is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    searchUsers: {
        parameters: {
            query?: {
                /** @description Index of the result page starting from 1. */
                page?: number;
                /** @description Number of items in a result page. Max value: 500 */
                pageSize?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserFilteringRequest"];
            };
        };
        responses: {
            /** @description Users */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserSearchResult"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestException"];
                };
            };
            /** @description Authentication is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Project is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    getUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                userId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RestException"];
                };
            };
            /** @description Authentication is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description User not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    createWikiPage: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["WikiPage"];
            };
        };
        responses: {
            /** @description Properties of the created wikipage */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WikiPage"];
                };
            };
            /** @description Request cannot be processed */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestException"];
                };
            };
            /** @description Authentication is required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceUnauthorizedException"];
                };
            };
            /** @description Access denied */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    updateWikiPage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Id of the wiki page to update */
                itemId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["WikiPage"];
            };
        };
        responses: {
            /** @description Properties of the updated wikipage */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WikiPage"];
                };
            };
            /** @description Request cannot be processed */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestException"];
                };
            };
            /** @description Authentication is required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceUnauthorizedException"];
                };
            };
            /** @description Access denied */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Wikipage not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    getWikiPage: {
        parameters: {
            query?: {
                /** @description Version of the wiki page */
                version?: number;
            };
            header?: never;
            path: {
                /** @description ID of the wiki page */
                wikiId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The wiki page */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WikiPage"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RestException"];
                };
            };
            /** @description Authentication is required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceUnauthorizedException"];
                };
            };
            /** @description Access denied */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description The wiki page does not exist, or the artifact is not a wiki page */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    deleteWikiPage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the wiki page */
                wikiId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The wiki page has been deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Request cannot be processed */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BadRequestException"];
                };
            };
            /** @description Authentication is required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResourceUnauthorizedException"];
                };
            };
            /** @description Access denied */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description The wiki page does not exist, or the artifact is not a wiki page */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    getAttachmentByName: {
        parameters: {
            query: {
                fileName: string;
            };
            header?: never;
            path: {
                wikiId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Attachment of wiki page */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Attachment"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RestException"];
                };
            };
            /** @description Authentication is required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceUnauthorizedException"];
                };
            };
            /** @description Authorization is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Wiki page / Attachment not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    commentOnWiki: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                wikiId: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": components["schemas"]["PostComment"];
            };
        };
        responses: {
            /** @description Comment created successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AttachmentReference"][];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RestException"];
                };
            };
            /** @description Authentication is required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceUnauthorizedException"];
                };
            };
            /** @description Authorization is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Wiki page not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
            /** @description Unexpected error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorException"];
                };
            };
        };
    };
    getWikiPageHistory: {
        parameters: {
            query?: {
                /** @description Index of the result page starting from 1. */
                page?: number;
                /** @description Number of items in a result page. Max value: 500 */
                pageSize?: number;
            };
            header?: never;
            path: {
                wikiId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Wiki page history */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ArtifactRevisionSearchResult"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RestException"];
                };
            };
            /** @description Authentication is required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceUnauthorizedException"];
                };
            };
            /** @description Wiki page not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    renderWikiPage: {
        parameters: {
            query?: {
                /** @description version of the wiki page */
                version?: number;
            };
            header?: never;
            path: {
                /** @description ID of the wiki page */
                wikiId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The wiki content rendered as HTML */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                    "text/html": string;
                };
            };
            /** @description Request cannot be processed */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestException"];
                    "text/html": components["schemas"]["BadRequestException"];
                };
            };
            /** @description Authentication is required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceUnauthorizedException"];
                    "text/html": components["schemas"]["ResourceUnauthorizedException"];
                };
            };
            /** @description Access denied */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                    "text/html": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description The wiki page does not exist, or the artifact is not a wiki page */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                    "text/html": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                    "text/html": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    checkWikiPageLock: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Wiki page id */
                wikiId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Details of the lock, or an empty response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LockInfo"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RestException"];
                };
            };
            /** @description Authentication is required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceUnauthorizedException"];
                };
            };
            /** @description Wiki page not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    lockWikiPage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Wiki page id */
                wikiId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LockRequest"];
            };
        };
        responses: {
            /** @description Lock acquired successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request, request validation error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestException"];
                };
            };
            /** @description Authentication is required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceUnauthorizedException"];
                };
            };
            /** @description Could not acquire lock */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Wiki page not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    unlockWikiPage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Wiki page id */
                wikiId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Unlock successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RestException"];
                };
            };
            /** @description Authentication is required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceUnauthorizedException"];
                };
            };
            /** @description Could not unlock */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Wiki page not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    getWikiPermissions: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Wiki page id */
                wikiId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Permissions of the wiki page */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AccessPermission"][];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RestException"];
                };
            };
            /** @description Authentication is required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceUnauthorizedException"];
                };
            };
            /** @description Authorization is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Wiki page not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    setWikiPermissions: {
        parameters: {
            query?: {
                /** @description Set permissions of children recursively */
                recursive?: boolean;
            };
            header?: never;
            path: {
                /** @description Wiki page id */
                wikiId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AccessPermissionsRequest"];
            };
        };
        responses: {
            /** @description Permissions of the wiki page */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AccessPermission"][];
                };
            };
            /** @description Request cannot be processed */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestException"];
                };
            };
            /** @description Authentication is required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceUnauthorizedException"];
                };
            };
            /** @description Authorization is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Wiki page not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    restoreWikiPageContent: {
        parameters: {
            query: {
                /** @description The version to be restored */
                version: number;
            };
            header?: never;
            path: {
                /** @description Wiki page id */
                wikiId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Wiki page has been restored */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WikiPage"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RestException"];
                };
            };
            /** @description Authentication is required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceUnauthorizedException"];
                };
            };
            /** @description Access denied */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Wiki page or version not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
        };
    };
    getItemsMappingInWorkingSet: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["WorkingSetItemsMappingRequest"];
            };
        };
        responses: {
            /** @description Mapping of Tracker Items in target Working-Set */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkingSetItemMapping"][];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestException"];
                };
            };
            /** @description Authentication is required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceUnauthorizedException"];
                };
            };
            /** @description Authorization is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
            /** @description Unexpected error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorException"];
                };
            };
        };
    };
    getWorkingSetInformation: {
        parameters: {
            query?: {
                /** @description The result contains the deleted Working-Sets */
                includeDeleted?: boolean;
            };
            header?: never;
            path: {
                /** @description Id of the Working-Set */
                workingSetId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Working-Set information */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkingSetInformation"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestException"];
                };
            };
            /** @description Authentication is required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceUnauthorizedException"];
                };
            };
            /** @description Authorization is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
            /** @description Unexpected error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorException"];
                };
            };
        };
    };
    getWorkingSetTrackers: {
        parameters: {
            query?: {
                /** @description The result contains the deleted Trackers */
                includeDeleted?: boolean;
            };
            header?: never;
            path: {
                /** @description Working-Set id */
                workingSetId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of trackers */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkingSetTracker"][];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestException"];
                };
            };
            /** @description Authentication is required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceUnauthorizedException"];
                };
            };
            /** @description Authorization is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
            /** @description Unexpected error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorException"];
                };
            };
        };
    };
    updateWorkingSetPermission: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workingSetId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["WorkingSetPermissionRequest"];
            };
        };
        responses: {
            /** @description Working set permissions are set */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RestException"];
                };
            };
            /** @description Authentication is required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceUnauthorizedException"];
                };
            };
            /** @description Authentication is required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceForbiddenException"];
                };
            };
            /** @description Working set / trackers / permission / roles not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundException"];
                };
            };
            /** @description Invalid permission request */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InvalidParametersException"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestsException"];
                };
            };
            /** @description Unexpected error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorException"];
                };
            };
        };
    };
}
type WithRequired<T, K extends keyof T> = T & {
    [P in K]-?: T[P];
};
